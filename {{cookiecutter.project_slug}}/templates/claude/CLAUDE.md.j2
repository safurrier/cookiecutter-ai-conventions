# CLAUDE.md - {{ cookiecutter.project_name }}

This is your AI Development Standard Library. It implements automatic domain loading based on the current task context.

## ðŸš¨ CRITICAL: Automatic Domain Loading

**When working on ANY task, IMMEDIATELY follow this 3-step process:**

1. **Identify the context** - What kind of task is this? What files/commands are involved?
2. **Load relevant domain cores** - Read the appropriate domain core files based on context
3. **Apply the guidance** - Use the loaded patterns and conventions in your work

### Context â†’ Domain Mapping

**AUTOMATICALLY load these domains when you detect:**

| Context | Load Domain | Trigger Keywords/Actions |
|---------|-------------|-------------------------|
{%- set domains = cookiecutter.default_domains.split(',') %}
{%- for domain in domains %}
{%- if domain.strip() == "git" %}
| Git operations | @domains/git/core.md | git, commit, branch, merge, rebase |
{%- elif domain.strip() == "testing" %}
| Testing code | @domains/testing/core.md | test_, pytest, assert, fixture |
{%- elif domain.strip() == "writing" %}
| Writing docs/commits | @domains/writing/core.md | README, docs, commit message |
{%- endif %}
{%- endfor %}
| Any code task | @global.md | Always active |

## Core Imports (Always Active)

### Universal Guidelines
@global.md

### Domain Knowledge (Auto-loaded based on context)
{%- for domain in domains %}
@domains/{{ domain.strip() }}/core.md
{%- endfor %}

### Shorthand Domain References
You can also use shorthand syntax for quick domain references:
{%- for domain in domains %}
- %{{ domain.strip() }} â†’ @domains/{{ domain.strip() }}/core.md
{%- endfor %}
- %writing%commit-messages â†’ @domains/writing/commit-messages.md
- %testing%unit-tests â†’ @domains/testing/unit-tests.md

{%- if cookiecutter.enable_learning_capture %}

### Learning System
@staging/learnings.md
{%- endif %}

## System Architecture

This CLAUDE.md system follows a **progressive context loading** approach:

1. **Global rules** (always active): Universal development principles
2. **Domain cores** (context-aware): Essential knowledge automatically loaded based on task
{%- if cookiecutter.enable_domain_composition %}
3. **Domain inheritance**: Domains can extend other domains for DRY conventions
{%- endif %}
{%- if cookiecutter.enable_learning_capture %}
4. **Learning capture** (continuous): New patterns staged for review and promotion
{%- endif %}

## Domain-Specific Loading Instructions

{%- if "git" in cookiecutter.default_domains %}

### Git Domain
**Auto-load @domains/git/core.md when:**
- Any git command is used or mentioned
- Working with branches, commits, merges
- User asks about version control
{%- endif %}

{%- if "testing" in cookiecutter.default_domains %}

### Testing Domain
**Auto-load @domains/testing/core.md when:**
- Files contain "test_" or "_test"
- User mentions testing, pytest, fixtures
- Writing test cases or assertions
{%- endif %}

{%- if "writing" in cookiecutter.default_domains %}

### Writing Domain
**Auto-load @domains/writing/core.md when:**
- Creating or editing documentation
- Writing commit messages
- Creating pull request descriptions
{%- endif %}

## Shorthand Domain Syntax

**Quick Reference**: Use `%domain` or `%domain%section` syntax for faster domain loading.

### Syntax Patterns
- `%writing` â†’ Loads @domains/writing/core.md  
- `%writing%commit-messages` â†’ Loads @domains/writing/commit-messages.md
- `%testing%unit-tests` â†’ Loads @domains/testing/unit-tests.md

### Context-Aware Usage
```markdown
When writing commit messages, follow %writing%commit-messages conventions.

For testing this feature, apply %testing patterns and %testing%e2e approaches.

Use %git conventions for branch naming and merge strategies.
```

### Shorthand Reference Table
{%- for domain in domains %}
{%- if domain.strip() == "git" %}
| `%git` | Git workflows and commit standards |
| `%git%commits` | Commit message formats |
| `%git%branching` | Branch naming and strategies |
{%- elif domain.strip() == "testing" %}
| `%testing` | Testing patterns and philosophy |
| `%testing%unit-tests` | Unit testing approaches |  
| `%testing%e2e` | End-to-end testing strategies |
{%- elif domain.strip() == "writing" %}
| `%writing` | Technical writing standards |
| `%writing%commit-messages` | Commit message guidelines |
| `%writing%pr-summaries` | Pull request descriptions |
{%- endif %}
{%- endfor %}

## Usage Examples

### Automatic Loading in Action
```
{%- if "writing" in cookiecutter.default_domains %}
User: "Help me write a commit message for these changes"
Claude: [IMMEDIATELY reads @domains/writing/commit-messages.md]
        [Applies natural language patterns, avoids LLM tells]
        "Add user authentication middleware"
{%- endif %}

{%- if "testing" in cookiecutter.default_domains %}
User: "Create tests for this function"
Claude: [IMMEDIATELY reads @domains/testing/core.md]
        [Applies testing patterns and best practices]
{%- endif %}
```

{%- if cookiecutter.enable_learning_capture %}

### Learning Management
When patterns emerge or corrections are needed:
1. Use `ai-conventions add` to capture insights directly to domains
2. Use `ai-conventions remove` to undo recent additions if needed
3. Changes automatically sync to all AI providers

Available commands:
- `ai-conventions add` - Add new learnings and conventions
- `ai-conventions remove` - Remove recent additions
- Auto-sync - Changes automatically propagate to providers
{%- endif %}

## Convention Improvement Workflow

**For AI dev tools: Use this workflow to continuously improve conventions based on user corrections and feedback.**

### 1. Review Conversation History

After completing tasks, analyze the conversation for improvement opportunities:

**High-priority signals to capture:**
- User corrected your assumptions or approach
- User provided specific feedback about your suggestions
- User manually referenced a convention file you should have loaded automatically
- User pointed out missed patterns or anti-patterns
- User had to explain domain-specific requirements

**Example review questions:**
- "Where did the user correct me?"
- "What patterns emerged that aren't documented?"
- "Which domain should have auto-loaded but didn't?"
- "What conventions were applied successfully vs. missed?"

### 2. CLI Workflow for Convention Updates

Use these commands to discover and update conventions:

```bash
# Step 1: Explore available domains
ai-conventions list

# Step 2: Check current status  
ai-conventions status

# Step 3: Add learnings (multiple scenarios)

# Scenario A: User correction on code pattern
ai-conventions add "User corrected: Use pathlib instead of os.path for file operations" \
  --domain python --category fix

# Scenario B: New pattern discovered  
ai-conventions add "Always validate input parameters before processing" \
  --domain python --category pattern

# Scenario C: Tool-specific gotcha
ai-conventions add "pytest fixtures with scope='session' cause issues in parallel tests" \
  --domain testing --category anti-pattern

# Scenario D: Domain management syntax
ai-conventions add "python/testing" "Use pytest fixtures for test data"

# Scenario E: Append to specific learning file
ai-conventions add "Git branch naming should include ticket numbers" \
  --domain git --file branch-naming.md --category pattern

# Step 4: Remove recent additions if needed
ai-conventions remove          # Remove last addition
ai-conventions remove 3        # Remove last 3 additions

# Note: All changes automatically sync to AI providers
```

### 3. Workflow Examples

**Example 1: User corrected commit message format**
```bash
# User said: "Commit messages should start with ticket number"
ai-conventions list
ai-conventions add "Prefix commit messages with ticket number: [TICKET-123]" \
  --domain git --category pattern
# Changes automatically sync to all providers
```

**Example 2: Missed testing pattern**
```bash
# User pointed out: "Always mock external API calls in tests"
ai-conventions add "Mock external APIs in tests to avoid flaky tests" \
  --domain testing --category pattern  
# Changes automatically sync to all providers
```

**Example 3: Anti-pattern discovered**
```bash
# User corrected: "Don't use global variables for configuration"
ai-conventions add "Avoid global variables for config, use dependency injection" \
  --domain python --category anti-pattern
# Changes automatically sync to all providers
```

### 4. Integration with Automatic Loading

When capturing learnings, consider if automatic domain loading could be improved:

- Should this context trigger automatic domain loading?
- Was there a keyword that should have loaded the relevant domain?
- Can this pattern help improve context detection?

```bash
# Example: Improve automatic loading triggers
ai-conventions add "Add 'API' and 'endpoint' as triggers for loading @domains/api/core.md" \
  --domain global --category tool-specific
# Changes automatically sync to all providers
```

This workflow ensures conventions evolve based on real usage patterns and user feedback, creating a continuously improving AI development experience.

## Available Domains

{%- for domain in domains %}
{%- if domain.strip() == "git" %}
- **git/**: Version control workflows and commit standards
{%- elif domain.strip() == "testing" %}
- **testing/**: Testing patterns and philosophy
{%- elif domain.strip() == "writing" %}
- **writing/**: Technical writing, commit messages, and documentation
{%- endif %}
{%- endfor %}
{%- if cookiecutter.enable_domain_composition %}

### Domain Composition

Domains can extend other domains using YAML frontmatter:

```yaml
---
extends: parent_domain
---
```

Or for multiple inheritance:

```yaml
---
extends:
  - parent1
  - parent2
---
```

This enables DRY (Don't Repeat Yourself) convention management by allowing specialized domains to build upon base domains.
{%- endif %}

## Evolution Process

This system evolves through use:
1. **Add**: New learnings go directly to appropriate domain files via `ai-conventions add`
2. **Remove**: Incorrect or outdated patterns can be removed with `ai-conventions remove`
3. **Auto-sync**: Changes automatically propagate to all AI providers
4. **Version Control**: Track changes through git history for full audit trail

The goal is building a comprehensive, maintainable knowledge base that improves AI assistance quality over time while keeping context manageable.
{%- if cookiecutter.enable_context_canary %}

## ðŸ¦œ Context Health Check

CANARY_PHRASE: ðŸ¦œ-CONVENTIONS-ACTIVE-{{ '{{' }} canary_timestamp {{ '}}' }}

When asked to "check conventions", "convention check", "canary", or "conventions loaded?", respond with:
"âœ“ Conventions loaded! Canary: ðŸ¦œ-CONVENTIONS-ACTIVE-{{ '{{' }} canary_timestamp {{ '}}' }}"

This helps verify conventions survived context compression.
{%- endif %}

## Project Information

- **Project**: {{ cookiecutter.project_name }}
- **Author**: {{ cookiecutter.author_name }}
- **Conventions Path**: ~/.claude/{{ cookiecutter.project_slug }}