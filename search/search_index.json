{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"AI Conventions","text":"<p>Cookiecutter template for creating AI development convention projects. This template helps teams establish and maintain consistent coding standards when working with AI assistants like Claude, Cursor, Windsurf, and Aider.</p>"},{"location":"#key-features","title":"\ud83d\ude80 Key Features","text":"<ul> <li>Interactive Domain Selection: Choose from curated convention domains</li> <li>Multi-Provider Support: Works with Claude, Cursor, Windsurf, Aider, and more</li> <li>Learning Capture: Automatically capture and evolve conventions from development patterns</li> <li>Domain Composition: Build complex conventions by extending base domains</li> <li>Progressive Context Loading: Automatic convention loading based on task context</li> </ul>"},{"location":"#quick-start","title":"\ud83c\udfaf Quick Start","text":"<ol> <li> <p>Generate a new project: <pre><code>cookiecutter gh:safurrier/cookiecutter-ai-conventions\n</code></pre></p> </li> <li> <p>Install the CLI: <pre><code>cd your-project\nuv tool install .\n</code></pre></p> </li> <li> <p>Check status: <pre><code>ai-conventions status\n</code></pre></p> </li> <li> <p>Start coding with your AI assistant!</p> </li> </ol>"},{"location":"#architecture","title":"\ud83c\udfd7\ufe0f Architecture","text":"<p>The AI conventions system uses a progressive context loading approach:</p> <pre><code>graph TD\n    A[Task Context] --&gt; B[Domain Detection]\n    B --&gt; C[Auto-load Relevant Domains]\n    C --&gt; D[Apply Conventions]\n    D --&gt; E[Capture Learnings]\n    E --&gt; F[Evolve Conventions]\n    F --&gt; C</code></pre>"},{"location":"#core-concepts","title":"\ud83d\udcda Core Concepts","text":"<ul> <li>Domains: Specialized convention sets (git, testing, writing, etc.)</li> <li>Providers: AI tool integrations (Claude, Cursor, etc.)</li> <li>Learning Capture: Automatic pattern detection and convention evolution</li> <li>Context Loading: Smart convention loading based on task detection</li> </ul>"},{"location":"#why-ai-conventions","title":"\ud83c\udf1f Why AI Conventions?","text":"<p>Traditional development standards become even more critical when working with AI assistants. This system ensures:</p> <ul> <li>Consistency across AI-generated code</li> <li>Quality through automated convention enforcement</li> <li>Evolution of standards based on real usage patterns</li> <li>Team Alignment on coding practices</li> </ul>"},{"location":"#supported-ai-tools","title":"\ud83d\udd27 Supported AI Tools","text":"Provider Status Features Claude \u2705 Full Support Context loading, learning capture Cursor \u2705 Full Support Rules integration, context awareness Windsurf \u2705 Full Support Native rule support Aider \u2705 Full Support Convention integration GitHub Copilot \u2705 Full Support Instructions and prompts"},{"location":"#documentation","title":"\ud83d\udcd6 Documentation","text":"<ul> <li>Getting Started - Installation and setup</li> <li>User Guide - Provider configuration</li> <li>Examples - Migration scenarios</li> <li>API Reference - Technical documentation</li> </ul>"},{"location":"#contributing","title":"\ud83e\udd1d Contributing","text":"<p>We welcome contributions! See our Contributing Guide for details.</p>"},{"location":"#license","title":"\ud83d\udcc4 License","text":"<p>MIT License - see LICENSE for details.</p>"},{"location":"FAQ/","title":"\u2753 Frequently Asked Questions","text":"<p>Quick answers to common questions about AI Conventions.</p>"},{"location":"FAQ/#general-questions","title":"General Questions","text":""},{"location":"FAQ/#what-is-this-project","title":"What is this project?","text":"<p>AI Conventions is a cookiecutter template that helps you create and maintain consistent coding conventions across all your AI tools (Claude, Cursor, Copilot, etc.). Instead of repeatedly telling your AI the same preferences, you define them once and they load automatically.</p>"},{"location":"FAQ/#how-is-this-different-from-just-using-cursorrules","title":"How is this different from just using .cursorrules?","text":"<p>While <code>.cursorrules</code> works for Cursor, this system: - Works across multiple AI tools (Claude, Cursor, Windsurf, Aider, Copilot, Codex) - Organizes conventions by domain (git, testing, APIs, etc.) - Supports learning capture to evolve over time - Enables team sharing via git - Provides tool-specific optimizations</p>"},{"location":"FAQ/#do-i-need-to-know-python","title":"Do I need to know Python?","text":"<p>No! While the system uses Python for installation, you don't need to know Python to use it. The conventions themselves are written in plain Markdown.</p>"},{"location":"FAQ/#is-this-free","title":"Is this free?","text":"<p>Yes! This is an open-source project (MIT licensed). Use it freely for personal or commercial projects.</p>"},{"location":"FAQ/#installation-questions","title":"Installation Questions","text":""},{"location":"FAQ/#which-providers-should-i-select","title":"Which providers should I select?","text":"<p>Select only the AI tools you actually use: - <code>claude</code> - If you use Claude.ai desktop app - <code>cursor</code> - If you use Cursor editor - <code>windsurf</code> - If you use Windsurf editor - <code>aider</code> - If you use the Aider CLI tool - <code>copilot</code> - If you use GitHub Copilot - <code>codex</code> - If you use OpenAI Codex</p> <p>You can always add more later.</p>"},{"location":"FAQ/#what-domains-should-i-choose","title":"What domains should I choose?","text":"<p>Start with the basics: - <code>git</code> - Version control conventions (recommended for everyone) - <code>testing</code> - If you write tests - Your primary language (<code>python</code>, <code>javascript</code>, etc.)</p> <p>You can add custom domains anytime.</p>"},{"location":"FAQ/#can-i-use-this-with-my-existing-conventions","title":"Can I use this with my existing conventions?","text":"<p>Yes! See the Migration Guide for converting existing conventions to this format.</p>"},{"location":"FAQ/#where-are-conventions-installed","title":"Where are conventions installed?","text":"<p>Depends on the provider: - Claude: <code>~/.claude/CLAUDE.md</code> - Cursor: Project root <code>.cursorrules</code> and <code>.cursor/rules/</code> - Windsurf: Project root <code>.windsurfrules</code> and <code>.windsurf/rules/</code> - Aider: Project root <code>CONVENTIONS.md</code> - Copilot: <code>.github/copilot-instructions.md</code> - Codex: Project root <code>AGENTS.md</code></p>"},{"location":"FAQ/#usage-questions","title":"Usage Questions","text":""},{"location":"FAQ/#how-do-i-know-if-my-conventions-are-working","title":"How do I know if my conventions are working?","text":"<p>Test with a simple prompt: 1. Ask your AI to write a function 2. Check if it follows your conventions (imports, naming, etc.) 3. If using canary feature, type \"canary\" to verify loading</p>"},{"location":"FAQ/#can-i-use-different-conventions-for-different-projects","title":"Can I use different conventions for different projects?","text":"<p>Yes! Each project can have its own conventions repository. Just: 1. Generate separate convention repos for each project 2. Install them to project-specific locations 3. Your AI will use the appropriate conventions based on context</p>"},{"location":"FAQ/#how-do-i-update-my-conventions","title":"How do I update my conventions?","text":"<p>For personal use: <pre><code># Edit your domain files\ncd my-conventions\n# Reinstall\npython install.py\n</code></pre></p> <p>For teams: <pre><code># Edit, commit, push\ngit add -A\ngit commit -m \"Update API conventions\"\ngit push\n\n# Team members pull and reinstall\ngit pull\npython install.py\n</code></pre></p>"},{"location":"FAQ/#what-if-my-ai-ignores-certain-conventions","title":"What if my AI ignores certain conventions?","text":"<p>Some tips: 1. Be specific and actionable (not \"write good code\" but \"use descriptive variable names like user_email not ue\") 2. Use consistent formatting across all conventions 3. Avoid contradictions between domains 4. Test with explicit prompts first</p>"},{"location":"FAQ/#features-questions","title":"Features Questions","text":""},{"location":"FAQ/#what-is-learning-capture","title":"What is learning capture?","text":"<p>Learning capture lets you save new patterns as you discover them. When you correct your AI or find a better pattern, capture it: <pre><code>capture-learning\n# Follow prompts to document the learning\n</code></pre></p> <p>These get staged for review and can be promoted to permanent conventions.</p>"},{"location":"FAQ/#what-is-the-context-canary","title":"What is the context canary?","text":"<p>The context canary is a way to verify your conventions are loaded. When enabled, you can type \"canary\" or \"check conventions\" and your AI will respond with a timestamp, confirming conventions are active.</p>"},{"location":"FAQ/#what-is-domain-composition","title":"What is domain composition?","text":"<p>Domain composition lets one domain inherit from another. For example: - <code>pytest</code> domain extends <code>testing</code> domain - <code>fastapi</code> domain extends <code>api</code> domain</p> <p>This prevents duplication and keeps conventions DRY.</p>"},{"location":"FAQ/#can-i-create-custom-domains","title":"Can I create custom domains?","text":"<p>Absolutely! Just: 1. Create a new directory in <code>domains/</code> 2. Add your <code>core.md</code> file with conventions 3. Reinstall with <code>python install.py</code></p>"},{"location":"FAQ/#team-questions","title":"Team Questions","text":""},{"location":"FAQ/#how-do-we-share-conventions","title":"How do we share conventions?","text":"<ol> <li>Create a git repository for your conventions</li> <li>Team members clone and install</li> <li>Updates are shared via git pull/push</li> <li>Everyone stays in sync</li> </ol>"},{"location":"FAQ/#can-different-team-members-use-different-ai-tools","title":"Can different team members use different AI tools?","text":"<p>Yes! During setup, each person selects their preferred providers. The core conventions remain the same, but each tool gets its optimized format.</p>"},{"location":"FAQ/#how-do-we-handle-conflicting-preferences","title":"How do we handle conflicting preferences?","text":"<ol> <li>Discuss and agree on team standards</li> <li>Document the decision in conventions</li> <li>Use domain composition for language/framework-specific variations</li> <li>Allow personal overrides for non-critical preferences</li> </ol>"},{"location":"FAQ/#troubleshooting-questions","title":"Troubleshooting Questions","text":""},{"location":"FAQ/#why-arent-my-conventions-loading","title":"Why aren't my conventions loading?","text":"<p>See the Troubleshooting Guide for detailed steps. Quick checks: 1. Verify installation location 2. Restart your AI tool 3. Check file permissions 4. Test with explicit mention</p>"},{"location":"FAQ/#can-i-uninstall-this","title":"Can I uninstall this?","text":"<p>Yes, simply delete the installed files: <pre><code># Remove Claude conventions\nrm ~/.claude/CLAUDE.md\n\n# Remove project files\nrm -rf my-conventions\n</code></pre></p>"},{"location":"FAQ/#will-this-slow-down-my-ai","title":"Will this slow down my AI?","text":"<p>No. Conventions are loaded once at the start of a session. The impact is minimal (typically &lt;100ms) and happens only on initialization.</p>"},{"location":"FAQ/#does-this-work-with-ai-api-calls","title":"Does this work with AI API calls?","text":"<p>This system is designed for interactive AI tools. For API usage, you'd need to manually include conventions in your prompts or system messages.</p>"},{"location":"FAQ/#contributing-questions","title":"Contributing Questions","text":""},{"location":"FAQ/#how-can-i-contribute","title":"How can I contribute?","text":"<p>We welcome contributions! You can: 1. Improve existing domains 2. Add new domains 3. Fix bugs 4. Improve documentation 5. Share your conventions as examples</p> <p>See Contributing Guide for details.</p>"},{"location":"FAQ/#i-found-a-bug-what-should-i-do","title":"I found a bug, what should I do?","text":"<ol> <li>Check if it's already reported in Issues</li> <li>If not, create a new issue with:</li> <li>Description of the bug</li> <li>Steps to reproduce</li> <li>Your environment (OS, Python version)</li> <li>Error messages</li> </ol>"},{"location":"FAQ/#can-i-create-a-provider-for-a-new-ai-tool","title":"Can I create a provider for a new AI tool?","text":"<p>Yes! To add support for a new AI tool: 1. Study existing providers in <code>ai_conventions/providers/</code> 2. Create a new provider class 3. Add templates for the tool's format 4. Submit a PR with tests</p>"},{"location":"FAQ/#still-have-questions","title":"Still Have Questions?","text":"<ul> <li>\ud83d\udce7 Open an issue</li> <li>\ud83d\udcac Join the discussions</li> <li>\ud83d\udcda Read the full documentation</li> </ul> <p>Remember: There are no stupid questions. If you're wondering about something, others probably are too!</p>"},{"location":"MIGRATION/","title":"\ud83d\ude80 Migration Guide","text":"<p>Migrating your existing AI coding conventions to the cookiecutter-ai-conventions format is straightforward. This guide walks you through the process step-by-step.</p>"},{"location":"MIGRATION/#table-of-contents","title":"\ud83d\udccb Table of Contents","text":"<ul> <li>Quick Start</li> <li>Migration Process</li> <li>AI Prompt Template</li> <li>Example Migrations</li> <li>Manual Migration Steps</li> <li>Troubleshooting</li> </ul>"},{"location":"MIGRATION/#quick-start","title":"\ud83c\udfaf Quick Start","text":"<p>If you have existing conventions in any format (text files, markdown, YAML), you can migrate them in 3 steps:</p> <ol> <li>Gather all your existing convention files</li> <li>Use our AI prompt template to transform them</li> <li>Generate your new conventions repository</li> </ol> <pre><code># Generate your new conventions repo\nuvx cookiecutter gh:safurrier/cookiecutter-ai-conventions\n\n# Follow the prompts to select providers and domains\n# Then add your migrated conventions to the generated files\n</code></pre>"},{"location":"MIGRATION/#migration-process","title":"\ud83d\udd04 Migration Process","text":""},{"location":"MIGRATION/#step-1-audit-your-current-conventions","title":"Step 1: Audit Your Current Conventions","text":"<p>First, locate all your existing conventions:</p> <ul> <li><code>.cursorrules</code> files</li> <li><code>CONVENTIONS.md</code> or <code>CONVENTIONS.txt</code></li> <li><code>.github/copilot-instructions.md</code></li> <li>Any team wikis or documentation</li> <li>Coding standards documents</li> <li>PR templates with guidelines</li> </ul>"},{"location":"MIGRATION/#step-2-identify-domains","title":"Step 2: Identify Domains","text":"<p>Group your conventions by domain:</p> <ul> <li>Git: Commit messages, branching, PR descriptions</li> <li>Testing: Test structure, naming, coverage requirements</li> <li>Code Style: Formatting, naming conventions, patterns</li> <li>Documentation: Comments, README structure, API docs</li> <li>Architecture: File organization, design patterns</li> </ul>"},{"location":"MIGRATION/#step-3-transform-using-ai","title":"Step 3: Transform Using AI","text":"<p>Use the prompt template below with your preferred AI assistant.</p>"},{"location":"MIGRATION/#ai-prompt-template","title":"\ud83e\udd16 AI Prompt Template","text":"<p>Copy and use this template with Claude, GPT-4, or another AI:</p> <pre><code>I need help migrating my existing AI coding conventions to the cookiecutter-ai-conventions format.\n\n## My Current Conventions\n[Paste your existing conventions here - can be multiple files]\n\n## Migration Request\nPlease analyze my conventions and:\n\n1. **Identify Domains**: Group conventions into domains (git, testing, code style, documentation, etc.)\n\n2. **Extract Triggering Contexts**: For each domain, identify when the conventions should apply:\n   - Keywords that trigger the domain\n   - File types or patterns\n   - Specific actions (commits, PRs, tests)\n\n3. **Format Conventions**: Structure them using this template:\n</code></pre>"},{"location":"MIGRATION/#domain-name","title":"Domain: [Name]","text":""},{"location":"MIGRATION/#when-this-applies","title":"When This Applies","text":"<ul> <li>Trigger: [context/keywords/actions]</li> <li>File patterns: [if applicable]</li> </ul>"},{"location":"MIGRATION/#conventions","title":"Conventions","text":""},{"location":"MIGRATION/#category","title":"[Category]","text":"<ul> <li>[Specific convention]</li> <li>[Another convention]</li> </ul>"},{"location":"MIGRATION/#another-category","title":"[Another Category]","text":"<ul> <li>[Specific convention] <pre><code>4. **Suggest File Structure**: \n   - Which conventions go in global.md\n   - Which need separate domain files\n   - Which are provider-specific\n\nPlease maintain my team's specific rules while improving clarity and organization.\n</code></pre></li> </ul>"},{"location":"MIGRATION/#example-migrations","title":"\ud83d\udcda Example Migrations","text":""},{"location":"MIGRATION/#example-1-simple-text-file-structured-format","title":"Example 1: Simple Text File \u2192 Structured Format","text":"<p>Input (CONVENTIONS.txt): <pre><code>Always use async/await instead of promises\nUse TypeScript for all new files  \nCommit messages should follow conventional commits\nWrite tests for all new features\nUse 2 spaces for indentation\n</code></pre></p> <p>Output (Migrated Structure):</p> <p><code>global.md</code>: <pre><code># Global Conventions\n\n## Code Quality Standards\n- Write tests for all new features\n- Maintain consistent code style across the project\n</code></pre></p> <p><code>domains/git/core.md</code>: <pre><code># Git Conventions\n\n## When This Applies\n- Any git operation\n- Creating commits, branches, or PRs\n\n## Conventions\n### Commit Messages\n- Follow conventional commits format\n- Examples: feat:, fix:, docs:, chore:\n</code></pre></p> <p><code>domains/javascript/core.md</code>: <pre><code># JavaScript/TypeScript Conventions\n\n## When This Applies\n- Writing JavaScript or TypeScript code\n- File extensions: .js, .ts, .jsx, .tsx\n\n## Conventions\n### Language Features\n- Use async/await over Promise chains\n- Prefer const over let/var\n\n### File Standards\n- All new files must be TypeScript\n- Use 2 spaces for indentation\n</code></pre></p>"},{"location":"MIGRATION/#example-2-cursorrules-multi-domain-format","title":"Example 2: .cursorrules \u2192 Multi-Domain Format","text":"<p>Input (.cursorrules): <pre><code>You are an expert React developer.\nAlways use functional components with hooks.\nFollow the Airbnb style guide.\nWrite comprehensive tests using Jest and React Testing Library.\nUse semantic commit messages.\nPrefer composition over inheritance.\n</code></pre></p> <p>Output (Migrated Structure):</p> <p><code>domains/react/core.md</code>: <pre><code># React Development\n\n## When This Applies\n- Creating React components\n- Working with .jsx/.tsx files\n- Keywords: component, React, hooks, useState\n\n## Conventions\n### Component Architecture\n- Always use functional components with hooks\n- Prefer composition over inheritance\n- Follow Airbnb React style guide\n\n### Testing Requirements\n- Write comprehensive tests using Jest\n- Use React Testing Library for component tests\n- Test user interactions, not implementation\n</code></pre></p>"},{"location":"MIGRATION/#example-3-multiple-files-unified-system","title":"Example 3: Multiple Files \u2192 Unified System","text":"<p>Input (Multiple sources): - Team wiki with coding standards - PR template with review checklist - Architecture decision records</p> <p>Output: Organized into domains like architecture/, testing/, review/, etc.</p>"},{"location":"MIGRATION/#manual-migration-steps","title":"\ud83d\udee0 Manual Migration Steps","text":"<p>If you prefer to migrate manually:</p>"},{"location":"MIGRATION/#1-create-domain-structure","title":"1. Create Domain Structure","text":"<pre><code># In your generated project\nmkdir -p domains/{custom-domain}\n</code></pre>"},{"location":"MIGRATION/#2-create-domain-files","title":"2. Create Domain Files","text":"<pre><code># Create a new domain file\ncat &gt; domains/api/core.md &lt;&lt; 'EOF'\n# API Development\n\n## When This Applies\n- Creating or modifying API endpoints\n- Working with REST or GraphQL\n\n## Conventions\n### Endpoint Design\n- Use RESTful naming conventions\n- Version APIs with /v1, /v2 prefixes\n\n### Response Format\n- Always return consistent error structures\n- Include request ID in responses\nEOF\n</code></pre>"},{"location":"MIGRATION/#3-update-provider-templates","title":"3. Update Provider Templates","text":"<p>For provider-specific conventions, edit the templates:</p> <pre><code># For Claude\nedit templates/claude/CLAUDE.md.j2\n\n# For Cursor  \nedit templates/cursor/cursorrules.j2\n</code></pre>"},{"location":"MIGRATION/#4-test-your-migration","title":"4. Test Your Migration","text":"<pre><code># Reinstall to test\npython install.py\n\n# Or use the TUI\npython install.py --tui\n</code></pre>"},{"location":"MIGRATION/#troubleshooting","title":"\u2753 Troubleshooting","text":""},{"location":"MIGRATION/#common-issues","title":"Common Issues","text":"<p>Q: My conventions are too large for one file A: Split them into multiple domain files. Each domain can have multiple files: - <code>domains/testing/unit.md</code> - <code>domains/testing/integration.md</code> - <code>domains/testing/e2e.md</code></p> <p>Q: I have provider-specific conventions A: Add them to the provider templates: - Claude: <code>templates/claude/CLAUDE.md.j2</code> - Cursor: <code>templates/cursor/cursorrules.j2</code> - Aider: <code>templates/aider/CONVENTIONS.md.j2</code></p> <p>Q: Some conventions don't fit any domain A: Add them to <code>global.md</code> or create a custom domain</p> <p>Q: How do I handle language-specific conventions? A: Create language domains: - <code>domains/python/core.md</code> - <code>domains/javascript/core.md</code> - <code>domains/rust/core.md</code></p>"},{"location":"MIGRATION/#getting-help","title":"Getting Help","text":"<p>If you run into issues:</p> <ol> <li>Check existing domains in <code>community-domains/</code> for examples</li> <li>Use the AI prompt template for complex migrations</li> <li>Open an issue with your specific use case</li> </ol>"},{"location":"MIGRATION/#next-steps","title":"\ud83c\udf89 Next Steps","text":"<p>After migration:</p> <ol> <li>Test your conventions with your AI tools</li> <li>Iterate based on what works best</li> <li>Share improvements back to the community</li> <li>Keep conventions updated as your project evolves</li> </ol> <p>Remember: The goal is consistency and clarity, not perfection. Start simple and evolve your conventions over time.</p>"},{"location":"configuration-system/","title":"Configuration Management System","text":"<p>The AI Conventions template includes a comprehensive configuration management system with support for multiple formats, validation, and migration between formats.</p>"},{"location":"configuration-system/#features","title":"Features","text":"<ul> <li>Multiple Format Support: YAML, TOML, JSON, and pyproject.toml</li> <li>Pydantic Validation: Type-safe configuration with automatic validation</li> <li>Format Migration: Convert between configuration formats</li> <li>CLI Tools: Command-line interface for configuration management</li> <li>Auto-discovery: Automatically finds configuration files in standard locations</li> </ul>"},{"location":"configuration-system/#configuration-schema","title":"Configuration Schema","text":"<p>The configuration uses Pydantic models for validation:</p> <pre><code>class ConventionsConfig(BaseModel):\n    project_name: str\n    project_slug: str\n    author_name: str\n    author_email: Optional[str]\n    selected_providers: list[str]\n    enable_learning_capture: bool = True\n    enable_context_canary: bool = True\n    enable_domain_composition: bool = True\n    default_domains: str = \"git,testing\"\n</code></pre>"},{"location":"configuration-system/#file-locations","title":"File Locations","text":"<p>The configuration system searches for files in this order:</p> <ol> <li><code>.ai-conventions.yaml</code> / <code>.ai-conventions.yml</code></li> <li><code>.ai-conventions.toml</code></li> <li><code>.ai-conventions.json</code></li> <li><code>ai-conventions.yaml</code> / <code>ai-conventions.yml</code></li> <li><code>ai-conventions.toml</code></li> <li><code>ai-conventions.json</code></li> <li><code>pyproject.toml</code> (under <code>[tool.ai-conventions]</code>)</li> </ol>"},{"location":"configuration-system/#cli-commands","title":"CLI Commands","text":"<p>The <code>conventions-config</code> command provides several subcommands:</p>"},{"location":"configuration-system/#show-configuration","title":"Show Configuration","text":"<p>Display the current configuration:</p> <pre><code># Show as YAML (default)\nconventions-config show\n\n# Show as JSON\nconventions-config show -f json\n\n# Show as TOML\nconventions-config show -f toml\n\n# Show specific file\nconventions-config show -p /path/to/config.yaml\n</code></pre>"},{"location":"configuration-system/#validate-configuration","title":"Validate Configuration","text":"<p>Check if a configuration file is valid:</p> <pre><code>conventions-config validate\n\n# Validate specific file\nconventions-config validate -p config.toml\n</code></pre>"},{"location":"configuration-system/#initialize-configuration","title":"Initialize Configuration","text":"<p>Create a new configuration file interactively:</p> <pre><code># Create YAML config (default)\nconventions-config init\n\n# Create TOML config\nconventions-config init -f toml\n\n# Create JSON config\nconventions-config init -f json\n\n# Specify output path\nconventions-config init -p my-config.yaml\n</code></pre>"},{"location":"configuration-system/#migrate-configuration","title":"Migrate Configuration","text":"<p>Convert between formats:</p> <pre><code># Convert YAML to TOML\nconventions-config migrate config.yaml toml\n\n# Convert to JSON with custom output\nconventions-config migrate config.yaml json -o settings.json\n\n# Convert from pyproject.toml to standalone YAML\nconventions-config migrate pyproject.toml yaml\n</code></pre>"},{"location":"configuration-system/#format-examples","title":"Format Examples","text":""},{"location":"configuration-system/#yaml-format","title":"YAML Format","text":"<pre><code>project_name: My AI Project\nproject_slug: my-ai-project\nauthor_name: Jane Developer\nauthor_email: jane@example.com\nselected_providers:\n  - claude\n  - cursor\n  - aider\nenable_learning_capture: true\nenable_context_canary: true\nenable_domain_composition: true\ndefault_domains: git,testing,python\n</code></pre>"},{"location":"configuration-system/#toml-format","title":"TOML Format","text":"<pre><code>project_name = \"My AI Project\"\nproject_slug = \"my-ai-project\"\nauthor_name = \"Jane Developer\"\nauthor_email = \"jane@example.com\"\nselected_providers = [\"claude\", \"cursor\", \"aider\"]\nenable_learning_capture = true\nenable_context_canary = true\nenable_domain_composition = true\ndefault_domains = \"git,testing,python\"\n</code></pre>"},{"location":"configuration-system/#json-format","title":"JSON Format","text":"<pre><code>{\n  \"project_name\": \"My AI Project\",\n  \"project_slug\": \"my-ai-project\",\n  \"author_name\": \"Jane Developer\",\n  \"author_email\": \"jane@example.com\",\n  \"selected_providers\": [\"claude\", \"cursor\", \"aider\"],\n  \"enable_learning_capture\": true,\n  \"enable_context_canary\": true,\n  \"enable_domain_composition\": true,\n  \"default_domains\": \"git,testing,python\"\n}\n</code></pre>"},{"location":"configuration-system/#pyprojecttoml-format","title":"pyproject.toml Format","text":"<pre><code>[tool.ai-conventions]\nproject_name = \"My AI Project\"\nproject_slug = \"my-ai-project\"\nauthor_name = \"Jane Developer\"\nauthor_email = \"jane@example.com\"\nselected_providers = [\"claude\", \"cursor\", \"aider\"]\nenable_learning_capture = true\nenable_context_canary = true\nenable_domain_composition = true\ndefault_domains = \"git,testing,python\"\n</code></pre>"},{"location":"configuration-system/#programmatic-usage","title":"Programmatic Usage","text":"<p>You can also use the configuration system programmatically:</p> <pre><code>from ai_conventions.config import ConfigManager, ConventionsConfig\n\n# Load configuration\nmanager = ConfigManager()\nconfig = manager.load_config()\n\n# Create new configuration\nnew_config = ConventionsConfig(\n    project_name=\"My Project\",\n    project_slug=\"my-project\",\n    author_name=\"Developer\",\n    selected_providers=[\"claude\", \"cursor\"]\n)\n\n# Save configuration\nmanager.save_config(new_config, format_type=\"yaml\")\n\n# Migrate between formats\nmanager.migrate_config(\n    source_path=Path(\"config.yaml\"),\n    target_format=\"toml\"\n)\n\n# Validate configuration\nvalid, errors = manager.validate_config()\n</code></pre>"},{"location":"configuration-system/#environment-variables","title":"Environment Variables","text":"<p>The configuration system also supports environment variable overrides:</p> <ul> <li><code>AI_CONVENTIONS_PROJECT_NAME</code></li> <li><code>AI_CONVENTIONS_AUTHOR_NAME</code></li> <li><code>AI_CONVENTIONS_PROVIDERS</code> (comma-separated)</li> </ul>"},{"location":"configuration-system/#best-practices","title":"Best Practices","text":"<ol> <li>Version Control: Commit your configuration file to version control</li> <li>Format Choice: </li> <li>Use YAML for human-friendly editing with comments</li> <li>Use TOML for Python projects (can be part of pyproject.toml)</li> <li>Use JSON for programmatic generation/consumption</li> <li>Validation: Always validate after manual edits</li> <li>Migration: Use the migration tool when changing formats to ensure data integrity</li> </ol>"},{"location":"creating-domains/","title":"Creating Your Own Convention Domain","text":"<p>So you've been using the community domains, but now you want to create conventions specific to your team's needs. Let's build one together.</p>"},{"location":"creating-domains/#what-were-building","title":"What We're Building","text":"<p>We'll create a React conventions domain that enforces your team's component patterns.</p>"},{"location":"creating-domains/#step-1-understand-the-anatomy","title":"Step 1: Understand the Anatomy","text":"<p>Every domain has: <pre><code>domains/react/\n\u251c\u2500\u2500 core.md          # Essential patterns (always loaded)\n\u251c\u2500\u2500 components.md    # Component patterns\n\u251c\u2500\u2500 testing.md       # Testing conventions\n\u2514\u2500\u2500 hooks.md         # Custom hooks patterns\n</code></pre></p>"},{"location":"creating-domains/#step-2-start-with-core-patterns","title":"Step 2: Start with Core Patterns","text":"<p>Create <code>domains/react/core.md</code>:</p> <pre><code># React Core Conventions\n\n## Component Structure\n\nComponents follow this pattern:\n\n\\```typescript\n// UserProfile.tsx\nimport { FC, useState, useEffect } from 'react';\nimport { useUser } from '@/hooks/useUser';\nimport { Card } from '@/components/ui/Card';\nimport type { User } from '@/types';\n\ninterface UserProfileProps {\n  userId: string;\n  onUpdate?: (user: User) =&gt; void;\n}\n\nexport const UserProfile: FC&lt;UserProfileProps&gt; = ({ userId, onUpdate }) =&gt; {\n  const { user, loading, error } = useUser(userId);\n\n  if (loading) return &lt;Card.Skeleton /&gt;;\n  if (error) return &lt;Card.Error message={error.message} /&gt;;\n\n  return (\n    &lt;Card&gt;\n      &lt;Card.Header&gt;{user.name}&lt;/Card.Header&gt;\n      &lt;Card.Body&gt;{/* content */}&lt;/Card.Body&gt;\n    &lt;/Card&gt;\n  );\n};\n\\```\n\nKey patterns:\n1. Named exports (not default)\n2. Props interface defined above component\n3. Hooks at the top\n4. Early returns for states\n5. Descriptive variable names\n</code></pre>"},{"location":"creating-domains/#step-3-add-specific-patterns","title":"Step 3: Add Specific Patterns","text":"<p>Create <code>domains/react/hooks.md</code>:</p> <pre><code># Custom React Hooks\n\n## Naming Convention\n\nAll hooks start with `use` and return an object (not array):\n\n\\```typescript\n// \u2705 GOOD\nexport const useUser = (userId: string) =&gt; {\n  const [user, setUser] = useState&lt;User | null&gt;(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState&lt;Error | null&gt;(null);\n\n  // ... logic ...\n\n  return { user, loading, error, refetch };\n};\n\n// \u274c BAD\nexport const useUser = (userId: string) =&gt; {\n  // Don't return arrays\n  return [user, loading, error];\n};\n\\```\n\n## Data Fetching Hooks\n\nAlways include loading, error, and refetch:\n\n\\```typescript\ninterface UseApiResult&lt;T&gt; {\n  data: T | null;\n  loading: boolean;\n  error: Error | null;\n  refetch: () =&gt; Promise&lt;void&gt;;\n}\n\nexport const useApi = &lt;T&gt;(url: string): UseApiResult&lt;T&gt; =&gt; {\n  // Implementation\n};\n\\```\n</code></pre>"},{"location":"creating-domains/#step-4-real-world-example","title":"Step 4: Real-World Example","text":"<p>Let's say your team discovered a pattern during code review. Capture it!</p> <p>Your colleague wrote: <pre><code>// They wrote this\nconst [name, setName] = useState('');\nconst [email, setEmail] = useState('');\nconst [phone, setPhone] = useState('');\n</code></pre></p> <p>You know this should be: <pre><code>// Should be this\nconst [formData, setFormData] = useState({\n  name: '',\n  email: '',\n  phone: ''\n});\n</code></pre></p> <p>Add to <code>domains/react/components.md</code>: <pre><code>## Form State Management\n\nGroup related form fields into a single state object:\n\n\\```typescript\n// \u2705 GOOD - Grouped state\nconst [formData, setFormData] = useState({\n  name: '',\n  email: '',\n  phone: ''\n});\n\nconst handleChange = (field: keyof typeof formData) =&gt; (\n  e: React.ChangeEvent&lt;HTMLInputElement&gt;\n) =&gt; {\n  setFormData(prev =&gt; ({ ...prev, [field]: e.target.value }));\n};\n\n// \u274c BAD - Separate states\nconst [name, setName] = useState('');\nconst [email, setEmail] = useState('');\nconst [phone, setPhone] = useState('');\n\\```\n</code></pre></p>"},{"location":"creating-domains/#step-5-test-your-domain","title":"Step 5: Test Your Domain","text":"<ol> <li> <p>Install your domain:    <pre><code>./install.py\n# Select 'react'\n</code></pre></p> </li> <li> <p>Ask your AI to create a React component:</p> <p>\"Create a UserList component that fetches and displays users\"</p> </li> <li> <p>It should follow your patterns:</p> </li> <li>Named export</li> <li>Proper TypeScript interfaces</li> <li>Your hook conventions</li> <li>Your state management patterns</li> </ol>"},{"location":"creating-domains/#step-6-share-with-community","title":"Step 6: Share with Community","text":"<p>If your domain could help others:</p> <ol> <li>Fork the repository</li> <li>Add your domain to <code>community-domains/</code></li> <li>Update <code>registry.yaml</code>:    <pre><code>domains:\n  - name: react\n    description: \"React component patterns with TypeScript\"\n    files:\n      - core.md\n      - components.md\n      - hooks.md\n      - testing.md\n    maintainer: \"@yourgithub\"\n</code></pre></li> <li>Submit a pull request!</li> </ol>"},{"location":"creating-domains/#best-practices","title":"Best Practices","text":""},{"location":"creating-domains/#do","title":"DO:","text":"<ul> <li>\u2705 Use real code examples from your codebase</li> <li>\u2705 Show both good and bad patterns</li> <li>\u2705 Explain WHY a pattern exists</li> <li>\u2705 Keep examples focused and clear</li> <li>\u2705 Update based on team feedback</li> </ul>"},{"location":"creating-domains/#dont","title":"DON'T:","text":"<ul> <li>\u274c Create theoretical patterns you don't use</li> <li>\u274c Copy-paste from style guides without adapting</li> <li>\u274c Make it too prescriptive - leave room for context</li> <li>\u274c Forget to test with actual AI prompts</li> </ul>"},{"location":"creating-domains/#evolution-process","title":"Evolution Process","text":"<p>Your domain will evolve:</p> <ol> <li>Week 1-2: Capture obvious patterns</li> <li>Week 3-4: Notice edge cases, refine</li> <li>Month 2: Patterns stabilize</li> <li>Ongoing: Capture new patterns as they emerge</li> </ol> <p>Use the learning capture system: <pre><code>./commands/capture-learning.py\n# Capture patterns as you discover them\n# Review weekly and promote stable ones\n</code></pre></p>"},{"location":"creating-domains/#examples-of-great-domains","title":"Examples of Great Domains","text":""},{"location":"creating-domains/#python-domain","title":"<code>python</code> Domain","text":"<ul> <li>Clear import conventions</li> <li>Error handling patterns</li> <li>Type hint guidelines</li> <li>Testing structure</li> </ul>"},{"location":"creating-domains/#git-domain","title":"<code>git</code> Domain","text":"<ul> <li>Commit message formats</li> <li>Branch naming</li> <li>PR templates</li> <li>Merge strategies</li> </ul>"},{"location":"creating-domains/#writing-domain","title":"<code>writing</code> Domain","text":"<ul> <li>Documentation style</li> <li>API doc format</li> <li>Comment conventions</li> <li>README structure</li> </ul> <p>Study these for inspiration!</p> <p>Ready to create your domain? Start with one core pattern and build from there. Your AI assistant will thank you!</p>"},{"location":"developing/","title":"Developing","text":"<p>This guide covers how to set up the development environment and contribute to the cookiecutter-ai-conventions project.</p>"},{"location":"developing/#quick-start","title":"Quick Start","text":"<pre><code># Clone the repository\ngit clone https://github.com/safurrier/cookiecutter-ai-conventions.git\ncd cookiecutter-ai-conventions\n\n# Set up development environment\nmake setup\n\n# Run tests\nmake check\n</code></pre>"},{"location":"developing/#development-environment-setup","title":"Development Environment Setup","text":""},{"location":"developing/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.12+ (recommended)</li> <li>UV package manager (will be installed automatically)</li> </ul>"},{"location":"developing/#setup","title":"Setup","text":"<pre><code># Install UV and set up the environment\nmake setup\n</code></pre> <p>This will: - Install UV if not present - Create a virtual environment with Python 3.12 - Install the project in editable mode with dev dependencies - Set up pre-commit hooks</p>"},{"location":"developing/#key-make-commands","title":"Key Make Commands","text":""},{"location":"developing/#testing","title":"Testing","text":"<pre><code>make test           # Run all tests (parallel + serial)\nmake test-watch     # Run tests in watch mode\nmake test-e2e       # Run end-to-end tests only\nmake ci-local       # Run CI checks locally (mimics GitHub Actions)\n</code></pre>"},{"location":"developing/#code-quality","title":"Code Quality","text":"<pre><code>make lint           # Run linting with ruff\nmake format         # Format code with ruff\nmake mypy           # Run type checking\nmake check          # Run all checks (lint + type + test)\nmake pre-commit     # Run pre-commit hooks on all files\n</code></pre>"},{"location":"developing/#template-testing","title":"Template Testing","text":"<pre><code>make test-cookiecutter  # Test template generation\nmake clean-output       # Clean test output directories\n</code></pre>"},{"location":"developing/#development-workflow","title":"Development Workflow","text":"<pre><code>make clean          # Clean up generated files\nmake help           # Show all available commands\n</code></pre>"},{"location":"developing/#testing-from-branches","title":"Testing from Branches","text":"<p>You can test the cookiecutter template directly from a Git branch:</p>"},{"location":"developing/#test-from-current-branch","title":"Test from Current Branch","text":"<pre><code># Test the current working branch\nuvx cookiecutter . --no-input\n\n# Test with custom values\nuvx cookiecutter . --no-input \\\n  project_name=\"My Test Project\" \\\n  selected_providers=\"claude,cursor\"\n</code></pre>"},{"location":"developing/#test-from-remote-branch","title":"Test from Remote Branch","text":"<pre><code># Test from a specific branch on GitHub\nuvx cookiecutter gh:safurrier/cookiecutter-ai-conventions \\\n  --checkout feature-branch \\\n  --no-input\n\n# Test from a pull request\nuvx cookiecutter gh:safurrier/cookiecutter-ai-conventions \\\n  --checkout pull/123/head \\\n  --no-input\n</code></pre>"},{"location":"developing/#test-with-interactive-mode","title":"Test with Interactive Mode","text":"<pre><code># Use the TUI for provider/domain selection\nuvx cookiecutter . \n\n# Or from a branch\nuvx cookiecutter gh:safurrier/cookiecutter-ai-conventions \\\n  --checkout your-branch-name\n</code></pre>"},{"location":"developing/#project-structure","title":"Project Structure","text":"<pre><code>.\n\u251c\u2500\u2500 docs/                    # Documentation\n\u251c\u2500\u2500 hooks/                   # Cookiecutter hooks\n\u2502   \u251c\u2500\u2500 pre_gen_project.py  # Pre-generation TUI\n\u2502   \u2514\u2500\u2500 post_gen_project.py # Post-generation setup\n\u251c\u2500\u2500 tests/                   # Test suite\n\u2502   \u251c\u2500\u2500 test_e2e_*.py       # End-to-end tests\n\u2502   \u251c\u2500\u2500 test_*.py           # Unit tests\n\u2502   \u2514\u2500\u2500 conftest.py         # Test configuration\n\u251c\u2500\u2500 {{cookiecutter.project_slug}}/  # Template directory\n\u2502   \u251c\u2500\u2500 ai_conventions/     # Python package\n\u2502   \u251c\u2500\u2500 domains/            # Convention domains\n\u2502   \u251c\u2500\u2500 templates/          # Provider templates\n\u2502   \u2514\u2500\u2500 community-domains/  # Available domains\n\u251c\u2500\u2500 community-domains/       # Master domain repository\n\u251c\u2500\u2500 cookiecutter.json       # Template configuration\n\u251c\u2500\u2500 Makefile                # Development commands\n\u2514\u2500\u2500 pyproject.toml          # Project configuration\n</code></pre>"},{"location":"developing/#testing-strategy","title":"Testing Strategy","text":"<p>We follow a progressive testing approach:</p> <ol> <li>E2E Tests (<code>test_e2e_*.py</code>): Test complete cookiecutter generation</li> <li>Integration Tests: Test component interactions</li> <li>Unit Tests: Test individual functions and classes</li> <li>Smoke Tests: Quick validation without full generation</li> </ol>"},{"location":"developing/#test-markers","title":"Test Markers","text":"<ul> <li><code>@pytest.mark.serial</code>: Tests that must run sequentially (not in parallel)</li> <li><code>@pytest.mark.slow</code>: Longer-running tests</li> <li><code>@pytest.mark.skipif</code>: Platform-specific tests</li> </ul>"},{"location":"developing/#common-development-tasks","title":"Common Development Tasks","text":""},{"location":"developing/#adding-a-new-provider","title":"Adding a New Provider","text":"<ol> <li>Add provider files to <code>{{cookiecutter.project_slug}}/ai_conventions/providers/</code></li> <li>Update <code>PROVIDER_REGISTRY</code> in <code>hooks/post_gen_project.py</code></li> <li>Add tests in <code>tests/test_*_provider.py</code></li> <li>Update documentation</li> </ol>"},{"location":"developing/#adding-a-new-domain","title":"Adding a New Domain","text":"<ol> <li>Add domain files to <code>community-domains/</code></li> <li>Update domain selection in <code>hooks/pre_gen_project.py</code></li> <li>Add tests for domain functionality</li> <li>Update documentation</li> </ol>"},{"location":"developing/#modifying-the-tui","title":"Modifying the TUI","text":"<ol> <li>Edit <code>hooks/pre_gen_project.py</code> for the Textual TUI</li> <li>Test with <code>make test-cookiecutter</code></li> <li>Ensure both interactive and <code>--no-input</code> modes work</li> </ol>"},{"location":"developing/#debugging-tips","title":"Debugging Tips","text":""},{"location":"developing/#test-failures","title":"Test Failures","text":"<pre><code># Run specific test with verbose output\nuv run pytest tests/test_specific.py::test_function -xvs\n\n# Run tests without parallel execution\nuv run pytest -m \"not serial\"\n\n# Debug E2E failures by checking generated output\nmake test-cookiecutter\nls -la test-output/\n</code></pre>"},{"location":"developing/#template-issues","title":"Template Issues","text":"<pre><code># Generate template and inspect\nmake test-cookiecutter\ncd test-output/my-ai-conventions/\nuv tool install .\nai-conventions status\n</code></pre>"},{"location":"developing/#ci-failures","title":"CI Failures","text":"<pre><code># Run exact CI checks locally\nmake ci-local\n</code></pre>"},{"location":"developing/#contributing","title":"Contributing","text":"<ol> <li>Fork the repository</li> <li>Create a feature branch: <code>git checkout -b feature/my-feature</code></li> <li>Make your changes</li> <li>Run tests: <code>make check</code></li> <li>Commit with conventional commit format: <code>feat: add new feature</code></li> <li>Push and create a pull request</li> </ol>"},{"location":"developing/#commit-message-format","title":"Commit Message Format","text":"<pre><code>type: description\n\nTypes: feat, fix, docs, style, refactor, test, chore\n</code></pre> <p>Examples: - <code>feat: add Windsurf provider support</code> - <code>fix: resolve CLI import errors</code> - <code>docs: update installation instructions</code></p>"},{"location":"developing/#release-process","title":"Release Process","text":"<ol> <li>Update version in relevant files</li> <li>Run full test suite: <code>make check</code></li> <li>Create release PR</li> <li>Tag release: <code>git tag v1.0.0</code></li> <li>Push tags: <code>git push --tags</code></li> </ol>"},{"location":"developing/#performance-considerations","title":"Performance Considerations","text":"<ul> <li>Template generation should complete in under 30 seconds</li> <li>UV tool installation should complete in under 60 seconds</li> <li>Test suite should complete in under 5 minutes</li> <li>Use parallel testing where possible (<code>pytest -n auto</code>)</li> </ul>"},{"location":"developing/#troubleshooting","title":"Troubleshooting","text":""},{"location":"developing/#uv-installation-issues","title":"UV Installation Issues","text":"<pre><code># Reinstall UV\ncurl -LsSf https://astral.sh/uv/install.sh | sh\nsource ~/.bashrc  # or restart shell\n</code></pre>"},{"location":"developing/#virtual-environment-issues","title":"Virtual Environment Issues","text":"<pre><code># Clean and recreate environment\nrm -rf .venv\nmake setup\n</code></pre>"},{"location":"developing/#test-isolation-issues","title":"Test Isolation Issues","text":"<pre><code># Clean test artifacts\nmake clean\nmake clean-output\n</code></pre> <p>For more troubleshooting help, see troubleshooting.md.</p>"},{"location":"getting-started/","title":"\ud83d\ude80 Getting Started Guide","text":"<p>This guide walks you through setting up AI conventions for your project, from installation to daily use.</p>"},{"location":"getting-started/#prerequisites","title":"\ud83d\udccb Prerequisites","text":"<ul> <li>A terminal/command prompt</li> <li>Git (for version control)</li> <li>That's it! The installer handles everything else</li> </ul>"},{"location":"getting-started/#quick-start-2-minutes","title":"\ud83c\udfaf Quick Start (2 minutes)","text":""},{"location":"getting-started/#1-run-the-installer","title":"1. Run the Installer","text":"<pre><code>uvx cookiecutter gh:safurrier/cookiecutter-ai-conventions\n</code></pre>"},{"location":"getting-started/#2-answer-the-prompts","title":"2. Answer the Prompts","text":"<p>You'll be asked a few questions:</p> <pre><code>project_name [My AI Conventions]: Team Conventions\nauthor_name [Your Name]: Alice Developer\nselected_providers [claude]: claude,cursor\ndefault_domains [git,testing]: git,testing,python\nenable_learning_capture [y]: y\n</code></pre>"},{"location":"getting-started/#3-install-and-use","title":"3. Install and Use","text":"<pre><code>cd team-conventions\npython install.py\n\n# That's it! Your AI now knows your conventions\n</code></pre>"},{"location":"getting-started/#detailed-setup","title":"\ud83d\udcd6 Detailed Setup","text":""},{"location":"getting-started/#step-1-choose-your-providers","title":"Step 1: Choose Your Providers","text":"<p>Select which AI tools you use (comma-separated):</p> <ul> <li><code>claude</code> - Claude.ai desktop app</li> <li><code>cursor</code> - Cursor editor</li> <li><code>windsurf</code> - Windsurf editor</li> <li><code>aider</code> - Aider CLI tool</li> <li><code>copilot</code> - GitHub Copilot</li> <li><code>codex</code> - OpenAI Codex</li> </ul> <p>Example: <code>claude,cursor</code> or just <code>claude</code></p>"},{"location":"getting-started/#step-2-select-convention-domains","title":"Step 2: Select Convention Domains","text":"<p>Choose starter domains or add your own later:</p> <ul> <li><code>git</code> - Version control best practices</li> <li><code>testing</code> - Test patterns and structure</li> <li><code>writing</code> - Documentation standards</li> <li><code>python</code> - Python-specific conventions</li> <li>Custom domains can be added anytime</li> </ul>"},{"location":"getting-started/#step-3-configure-features","title":"Step 3: Configure Features","text":"<ul> <li>Learning Capture - Save new patterns as you discover them</li> <li>Context Canary - Verify conventions are loaded</li> <li>Domain Composition - Let domains inherit from each other</li> </ul>"},{"location":"getting-started/#installation-options","title":"\ud83d\udd27 Installation Options","text":""},{"location":"getting-started/#option-1-bootstrap-script-recommended","title":"Option 1: Bootstrap Script (Recommended)","text":"<p>The bootstrap script handles everything: - Installs <code>uv</code> package manager if needed - Runs cookiecutter with the template - Provides clear next steps</p>"},{"location":"getting-started/#option-2-manual-installation","title":"Option 2: Manual Installation","text":"<pre><code># Install uv\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n\n# Run cookiecutter\nuvx cookiecutter gh:safurrier/cookiecutter-ai-conventions\n\n# Install CLI tools\ncd my-conventions\nuv tool install .\n</code></pre>"},{"location":"getting-started/#option-3-using-existing-tools","title":"Option 3: Using Existing Tools","text":"<p>If you have Python and pip: <pre><code>pip install cookiecutter\ncookiecutter gh:safurrier/cookiecutter-ai-conventions\n</code></pre></p>"},{"location":"getting-started/#understanding-your-setup","title":"\ud83d\udcc1 Understanding Your Setup","text":"<p>After installation, you'll have:</p> <pre><code>my-conventions/\n\u251c\u2500\u2500 global.md                 # Universal conventions\n\u251c\u2500\u2500 domains/                  # Domain-specific rules\n\u2502   \u251c\u2500\u2500 git/core.md          # Git conventions\n\u2502   \u2514\u2500\u2500 testing/core.md      # Testing patterns\n\u251c\u2500\u2500 templates/               # AI tool configurations\n\u2502   \u2514\u2500\u2500 claude/CLAUDE.md.j2  # Claude template\n\u251c\u2500\u2500 install.py               # Installation script\n\u2514\u2500\u2500 README.md               # Your documentation\n</code></pre>"},{"location":"getting-started/#key-files-explained","title":"Key Files Explained","text":"<p>global.md - Rules that apply everywhere <pre><code># Global Conventions\n- Use descriptive variable names\n- Follow team style guide\n- Document complex logic\n</code></pre></p> <p>domains/[name]/core.md - Context-specific rules <pre><code># Git Conventions\n\n## When This Applies\n- Creating commits, branches, PRs\n- Keywords: git, commit, branch\n\n## Conventions\n- Use conventional commits\n- Branch names: feature/description\n</code></pre></p>"},{"location":"getting-started/#using-your-conventions","title":"\ud83c\udfae Using Your Conventions","text":""},{"location":"getting-started/#with-claude","title":"With Claude","text":"<p>Your conventions load automatically when you: 1. Open Claude desktop app 2. Start a new conversation 3. Ask coding questions</p> <p>Test it: \"Write a Python function to validate email addresses\"</p>"},{"location":"getting-started/#with-cursor","title":"With Cursor","text":"<p>Conventions are loaded from: - <code>.cursorrules</code> (legacy) - <code>.cursor/rules/*.md</code> (modern MDC)</p>"},{"location":"getting-started/#with-other-tools","title":"With Other Tools","text":"<p>Each tool has its own configuration method. Run <code>ai-conventions status</code> to see what's installed.</p>"},{"location":"getting-started/#capturing-new-patterns","title":"\ud83d\udcdd Capturing New Patterns","text":"<p>When you spot a pattern worth saving:</p>"},{"location":"getting-started/#option-1-cli-command","title":"Option 1: CLI Command","text":"<pre><code>capture-learning\n\n# Follow the prompts to document:\n# - What you learned\n# - Why it matters\n# - How to apply it\n</code></pre>"},{"location":"getting-started/#option-2-manual-addition","title":"Option 2: Manual Addition","text":"<ol> <li>Edit the appropriate domain file</li> <li>Add your convention</li> <li>Run <code>python install.py</code> to update</li> </ol>"},{"location":"getting-started/#example-capturing-a-testing-pattern","title":"Example: Capturing a Testing Pattern","text":"<p>You discover your team prefers pytest fixtures over setup methods:</p> <pre><code>capture-learning\n\nLearning: Use pytest fixtures instead of setUp methods\nContext: Writing Python tests\nDomain: testing\n</code></pre> <p>This gets added to your conventions and shared with your team.</p>"},{"location":"getting-started/#keeping-conventions-updated","title":"\ud83d\udd04 Keeping Conventions Updated","text":""},{"location":"getting-started/#for-individuals","title":"For Individuals","text":"<pre><code># Update all AI tools with latest conventions\ncd my-conventions\npython install.py\n</code></pre>"},{"location":"getting-started/#for-teams","title":"For Teams","text":"<pre><code># Share via git\ngit add -A\ngit commit -m \"docs: add API error handling conventions\"\ngit push\n\n# Team members pull and reinstall\ngit pull\npython install.py\n</code></pre>"},{"location":"getting-started/#pro-tips","title":"\u26a1 Pro Tips","text":""},{"location":"getting-started/#1-start-small","title":"1. Start Small","text":"<p>Don't try to document everything at once. Start with your most repeated corrections.</p>"},{"location":"getting-started/#2-be-specific","title":"2. Be Specific","text":"<p>Instead of: \"Write good commit messages\" Better: \"Use conventional commits: feat:, fix:, docs:\"</p>"},{"location":"getting-started/#3-include-examples","title":"3. Include Examples","text":"<pre><code>## API Endpoints\n- Use REST naming: GET /users, POST /users\n- Return consistent errors:\n  ```json\n  {\"error\": {\"code\": \"NOT_FOUND\", \"message\": \"User not found\"}}\n  ```\n</code></pre>"},{"location":"getting-started/#4-review-weekly","title":"4. Review Weekly","text":"<p>Set a reminder to review captured learnings and promote good ones to permanent conventions.</p>"},{"location":"getting-started/#5-test-your-conventions","title":"5. Test Your Conventions","text":"<p>After installing, test with real coding tasks to ensure they're working as expected.</p>"},{"location":"getting-started/#getting-help","title":"\ud83c\udd98 Getting Help","text":"<ul> <li>Installation Issues: Check Troubleshooting</li> <li>Convention Ideas: Browse community domains</li> <li>Feature Requests: Open an issue</li> </ul>"},{"location":"getting-started/#next-steps","title":"\ud83c\udf89 Next Steps","text":"<ol> <li>\u2705 Installation complete</li> <li>\ud83d\udcdd Try your first coding task with AI</li> <li>\ud83d\udd04 Capture your first learning</li> <li>\ud83d\udc65 Share with your team</li> <li>\ud83c\udf1f Contribute improvements back</li> </ol> <p>Welcome to consistent AI coding! \ud83d\ude80</p>"},{"location":"providers/","title":"Provider-Specific Setup","text":"<p>Each AI tool has its own way of loading conventions. Here's how to set up each one.</p>"},{"location":"providers/#claude-desktop-api","title":"Claude (Desktop &amp; API)","text":"<p>Claude has the best support through the CLAUDE.md system.</p>"},{"location":"providers/#installation","title":"Installation","text":"<pre><code>./install.py\n# Automatically installs to ~/.claude/CLAUDE.md\n</code></pre>"},{"location":"providers/#how-it-works","title":"How It Works","text":"<ul> <li>Claude automatically loads <code>~/.claude/CLAUDE.md</code> </li> <li>Full context is available in every conversation</li> <li>No manual loading required</li> </ul>"},{"location":"providers/#best-practices","title":"Best Practices","text":"<ul> <li>Keep CLAUDE.md under 8,000 tokens for best performance</li> <li>Use clear section headers for easy navigation</li> <li>Update through your conventions repo, not directly</li> </ul>"},{"location":"providers/#verification","title":"Verification","text":"<p>Ask Claude:</p> <p>\"What conventions am I following?\"</p> <p>Claude should list your installed domains.</p>"},{"location":"providers/#cursor","title":"Cursor","text":"<p>Full Cursor support with both legacy and modern MDC format.</p>"},{"location":"providers/#installation_1","title":"Installation","text":"<p>When you select Cursor as a provider, the template automatically creates: - <code>.cursorrules</code> - Legacy format for backwards compatibility - <code>.cursor/rules/*.mdc</code> - Modern MDC files with advanced features</p>"},{"location":"providers/#how-it-works_1","title":"How It Works","text":""},{"location":"providers/#legacy-format-cursorrules","title":"Legacy Format (.cursorrules)","text":"<ul> <li>Plain text file in project root</li> <li>Automatically loaded by Cursor</li> <li>Contains all your conventions in one file</li> </ul>"},{"location":"providers/#modern-format-cursorrules","title":"Modern Format (.cursor/rules/)","text":"<ul> <li>MDC (Markdown Cursor) files</li> <li>Supports metadata and file pattern matching</li> <li>Better organization with domain-specific files</li> </ul>"},{"location":"providers/#features","title":"Features","text":"<ul> <li>\u2705 Automatic loading</li> <li>\u2705 File pattern matching (MDC format)</li> <li>\u2705 Domain-specific rules</li> <li>\u2705 Works with existing projects</li> <li>\u2705 Learning capture integration</li> </ul>"},{"location":"providers/#file-structure","title":"File Structure","text":"<pre><code>your-project/\n\u251c\u2500\u2500 .cursorrules              # Legacy format\n\u2514\u2500\u2500 .cursor/\n    \u2514\u2500\u2500 rules/\n        \u251c\u2500\u2500 main.mdc          # Main conventions\n        \u251c\u2500\u2500 git.mdc           # Git-specific rules\n        \u251c\u2500\u2500 testing.mdc       # Testing patterns\n        \u2514\u2500\u2500 writing.mdc       # Documentation style\n</code></pre>"},{"location":"providers/#best-practices_1","title":"Best Practices","text":"<ul> <li>Use MDC format for new rules (more powerful)</li> <li>Keep individual MDC files focused</li> <li>Use file globs to target specific file types</li> <li>Set <code>alwaysApply: false</code> for domain-specific rules</li> </ul>"},{"location":"providers/#windsurf","title":"Windsurf","text":"<p>Full Windsurf support with advanced rule system and glob patterns.</p>"},{"location":"providers/#installation_2","title":"Installation","text":"<p>When you select Windsurf as a provider, the template automatically creates: - <code>.windsurfrules</code> - Main rules file in project root - <code>.windsurf/rules/*.md</code> - Advanced rule files with glob patterns</p>"},{"location":"providers/#how-it-works_2","title":"How It Works","text":""},{"location":"providers/#root-rules-windsurfrules","title":"Root Rules (.windsurfrules)","text":"<ul> <li>Markdown file automatically loaded by Windsurf</li> <li>Contains all conventions in one place</li> <li>Simple and straightforward</li> </ul>"},{"location":"providers/#advanced-rules-windsurfrules","title":"Advanced Rules (.windsurf/rules/)","text":"<ul> <li>Multiple markdown files for better organization</li> <li>Glob pattern support for file-specific rules</li> <li>Character limit aware (6k per file, 12k total)</li> <li>Different activation modes</li> </ul>"},{"location":"providers/#features_1","title":"Features","text":"<ul> <li>\u2705 Automatic loading</li> <li>\u2705 Glob pattern matching</li> <li>\u2705 Domain-specific rule files</li> <li>\u2705 Character limit compliance</li> <li>\u2705 Multiple activation modes</li> <li>\u2705 Cascade AI integration</li> </ul>"},{"location":"providers/#file-structure_1","title":"File Structure","text":"<pre><code>your-project/\n\u251c\u2500\u2500 .windsurfrules            # Main rules file\n\u2514\u2500\u2500 .windsurf/\n    \u2514\u2500\u2500 rules/\n        \u251c\u2500\u2500 main.md           # Primary conventions\n        \u251c\u2500\u2500 git.md            # Git rules with globs\n        \u251c\u2500\u2500 testing.md        # Testing patterns\n        \u2514\u2500\u2500 writing.md        # Documentation style\n</code></pre>"},{"location":"providers/#activation-modes","title":"Activation Modes","text":"<ul> <li>Always On: Rules always active</li> <li>Manual: Activated by @mentioning</li> <li>Model Decision: AI decides when to apply</li> <li>Glob: Applied to matching files</li> </ul>"},{"location":"providers/#best-practices_2","title":"Best Practices","text":"<ul> <li>Keep individual files under 6,000 characters</li> <li>Use glob patterns for targeted rules</li> <li>Reference detailed docs instead of duplicating</li> <li>Monitor total character count (12k limit)</li> </ul>"},{"location":"providers/#aider","title":"Aider","text":"<p>Full Aider support with automatic convention loading.</p>"},{"location":"providers/#installation_3","title":"Installation","text":"<p>When you select Aider as a provider, the template automatically creates: - <code>CONVENTIONS.md</code> - Main conventions file (automatically loaded) - <code>.aider.conf.yml</code> - Configuration with auto-loading setup - <code>docs/aider-setup.md</code> - Complete setup guide</p>"},{"location":"providers/#how-it-works_3","title":"How It Works","text":""},{"location":"providers/#convention-loading","title":"Convention Loading","text":"<ul> <li>Aider automatically reads <code>CONVENTIONS.md</code> on startup</li> <li>Domain files included as read-only context</li> <li>No manual loading required</li> </ul>"},{"location":"providers/#configuration","title":"Configuration","text":"<p>The <code>.aider.conf.yml</code> file sets up: <pre><code># Auto-loaded files\nread: CONVENTIONS.md\n\n# Read-only domain files\nread-only:\n  - global.md\n  - domains/git/core.md\n  - domains/testing/core.md\n  # ... other selected domains\n</code></pre></p>"},{"location":"providers/#features_2","title":"Features","text":"<ul> <li>\u2705 Automatic convention loading</li> <li>\u2705 Domain-specific context</li> <li>\u2705 Test command integration</li> <li>\u2705 Learning capture support</li> <li>\u2705 Multiple model support</li> <li>\u2705 Git integration</li> </ul>"},{"location":"providers/#file-structure_2","title":"File Structure","text":"<pre><code>your-project/\n\u251c\u2500\u2500 CONVENTIONS.md       # Main conventions (auto-loaded)\n\u251c\u2500\u2500 .aider.conf.yml     # Aider configuration\n\u251c\u2500\u2500 domains/            # Domain conventions\n\u2502   \u251c\u2500\u2500 git/core.md\n\u2502   \u251c\u2500\u2500 testing/core.md\n\u2502   \u2514\u2500\u2500 ...\n\u2514\u2500\u2500 docs/\n    \u2514\u2500\u2500 aider-setup.md  # Setup guide\n</code></pre>"},{"location":"providers/#best-practices_3","title":"Best Practices","text":"<ul> <li>Let Aider automatically load conventions</li> <li>Use chat mode to ask about standards</li> <li>Configure test/lint commands in <code>.aider.conf.yml</code></li> <li>Keep CONVENTIONS.md concise and clear</li> </ul>"},{"location":"providers/#usage","title":"Usage","text":"<pre><code># Just run aider - conventions load automatically\naider\n\n# Work on specific files\naider src/main.py tests/\n\n# Use a specific model\naider --model gpt-4o\n</code></pre>"},{"location":"providers/#github-copilot","title":"GitHub Copilot","text":"<p>Full GitHub Copilot support with official convention files.</p>"},{"location":"providers/#installation_4","title":"Installation","text":"<p>When you select Copilot as a provider, the template automatically creates: - <code>.github/copilot-instructions.md</code> - Main instructions file (automatically loaded) - <code>.vscode/settings.json</code> - VS Code configuration - <code>.github/prompts/*.prompt.md</code> - Domain-specific prompt files - <code>docs/copilot-setup.md</code> - Complete setup guide</p>"},{"location":"providers/#how-it-works_4","title":"How It Works","text":""},{"location":"providers/#convention-loading_1","title":"Convention Loading","text":"<ul> <li>Copilot automatically reads <code>.github/copilot-instructions.md</code></li> <li>Instructions included in every chat and code generation</li> <li>No manual configuration required</li> </ul>"},{"location":"providers/#vs-code-integration","title":"VS Code Integration","text":"<p>The <code>.vscode/settings.json</code> file enables: <pre><code>{\n  \"github.copilot.chat.codeGeneration.useInstructionFiles\": true,\n  \"github.copilot.chat.codeGeneration.instructions\": [\n    {\n      \"text\": \"Follow the conventions in .github/copilot-instructions.md\"\n    }\n  ]\n}\n</code></pre></p>"},{"location":"providers/#features_3","title":"Features","text":"<ul> <li>\u2705 Official convention file support</li> <li>\u2705 Automatic loading in VS Code</li> <li>\u2705 Domain-specific prompt files</li> <li>\u2705 Multi-model support (GPT-4o, Claude 3.5, Gemini)</li> <li>\u2705 Works on GitHub.com</li> <li>\u2705 Pull request integration</li> </ul>"},{"location":"providers/#file-structure_3","title":"File Structure","text":"<pre><code>your-project/\n\u251c\u2500\u2500 .github/\n\u2502   \u251c\u2500\u2500 copilot-instructions.md    # Main instructions\n\u2502   \u2514\u2500\u2500 prompts/                    # Domain prompts\n\u2502       \u251c\u2500\u2500 git.prompt.md\n\u2502       \u251c\u2500\u2500 testing.prompt.md\n\u2502       \u2514\u2500\u2500 writing.prompt.md\n\u2514\u2500\u2500 .vscode/\n    \u2514\u2500\u2500 settings.json               # VS Code config\n</code></pre>"},{"location":"providers/#best-practices_4","title":"Best Practices","text":"<ul> <li>Keep instructions concise and actionable</li> <li>Use \"Always\" and \"Never\" for clear rules</li> <li>Include concrete examples</li> <li>Update based on team feedback</li> </ul>"},{"location":"providers/#openai-codex-cli","title":"OpenAI Codex CLI","text":"<p>Full OpenAI Codex support with AGENTS.md convention files.</p>"},{"location":"providers/#installation_5","title":"Installation","text":"<p>When you select Codex as a provider, the template automatically creates: - <code>AGENTS.md</code> - AI agent instructions (automatically loaded) - <code>.codex/config.json</code> - Codex configuration - <code>codex.sh</code> - Wrapper script for easy usage - <code>docs/codex-setup.md</code> - Complete setup guide</p>"},{"location":"providers/#how-it-works_5","title":"How It Works","text":""},{"location":"providers/#convention-loading_2","title":"Convention Loading","text":"<ul> <li>Codex automatically reads <code>AGENTS.md</code> from your project root</li> <li>Instructions guide the AI's behavior and code generation</li> <li>No manual configuration required</li> </ul>"},{"location":"providers/#git-aware-context","title":"Git-Aware Context","text":"<ul> <li>Understands your repository structure</li> <li>Follows your commit conventions</li> <li>Can create branches and commits</li> </ul>"},{"location":"providers/#features_4","title":"Features","text":"<ul> <li>\u2705 Automatic AGENTS.md loading</li> <li>\u2705 Git repository awareness</li> <li>\u2705 Multi-file editing support</li> <li>\u2705 Sandboxed code execution</li> <li>\u2705 Multiple approval modes</li> <li>\u2705 Test-first development support</li> </ul>"},{"location":"providers/#file-structure_4","title":"File Structure","text":"<pre><code>your-project/\n\u251c\u2500\u2500 AGENTS.md          # AI agent instructions\n\u251c\u2500\u2500 .codex/           # Configuration directory\n\u2502   \u2514\u2500\u2500 config.json   # Project settings\n\u251c\u2500\u2500 codex.sh          # Wrapper script\n\u2514\u2500\u2500 docs/\n    \u2514\u2500\u2500 codex-setup.md # Setup guide\n</code></pre>"},{"location":"providers/#usage_1","title":"Usage","text":"<pre><code># Install Codex CLI\nnpm install -g @openai/codex\n\n# Set API key\nexport OPENAI_API_KEY='your-key'\n\n# Run with wrapper\n./codex.sh\n\n# Or run directly\ncodex\n</code></pre>"},{"location":"providers/#best-practices_5","title":"Best Practices","text":"<ul> <li>Write clear, specific instructions</li> <li>Update AGENTS.md as conventions evolve</li> <li>Use approval mode for safety</li> <li>Make incremental changes</li> </ul>"},{"location":"providers/#jetbrains-ai-assistant","title":"JetBrains AI Assistant","text":"<p>JetBrains IDEs (PyCharm, IntelliJ, etc.) have their own AI assistant.</p>"},{"location":"providers/#setup","title":"Setup","text":"<ol> <li>Create custom prompts in settings</li> <li>Reference your conventions in prompts</li> <li>Use live templates for common patterns</li> </ol>"},{"location":"providers/#example-custom-prompt","title":"Example Custom Prompt","text":"<pre><code>When generating Python code, follow these conventions:\n- Imports at top, grouped by type\n- Type hints for all functions\n- Docstrings in Google style\n</code></pre>"},{"location":"providers/#custom-integration","title":"Custom Integration","text":"<p>Want to integrate with a tool not listed here?</p>"},{"location":"providers/#basic-integration-pattern","title":"Basic Integration Pattern","text":"<ol> <li> <p>Find the config location:    <pre><code># Usually in:\n~/.config/[tool]/\n~/.[tool]/\n</code></pre></p> </li> <li> <p>Export your conventions:    <pre><code># Create a single file\ncat domains/*/core.md &gt; conventions.md\n</code></pre></p> </li> <li> <p>Add to tool's context:</p> </li> <li>Look for: prompts, rules, templates, or context settings</li> <li>Add your conventions file</li> <li>Test with simple prompts</li> </ol>"},{"location":"providers/#creating-a-provider-integration","title":"Creating a Provider Integration","text":"<p>If you want to contribute a provider integration:</p> <ol> <li>Research the tool's extension API</li> <li>Create a loading mechanism</li> <li>Test with multiple domains</li> <li>Submit a PR with:</li> <li>Integration code</li> <li>Documentation</li> <li>Installation script</li> </ol>"},{"location":"providers/#provider-comparison","title":"Provider Comparison","text":"Provider Global Support Auto-Load Hot Reload Context Size Claude \u2705 \u2705 \u2705 8K tokens Cursor \u2705 \u2705 \u274c Per-file Windsurf \u2705 \u2705 \u274c 12K total Aider \u2705 \u2705 \u274c Unlimited Copilot \u2705 \u2705 \u274c Per-chat Codex \u2705 \u2705 \u274c Git repo"},{"location":"providers/#testing-your-provider-setup","title":"Testing Your Provider Setup","text":"<p>Regardless of provider, test with these prompts:</p> <ol> <li>Basic Test: <p>\"Write a hello world function\"</p> </li> </ol> <p>Should follow your language conventions.</p> <ol> <li>Convention Test: <p>\"What are my coding conventions?\"</p> </li> </ol> <p>Should list your domains.</p> <ol> <li>Specific Pattern Test: <p>\"Write a test for user creation\"</p> </li> </ol> <p>Should follow your testing patterns.</p> <p>If any test fails, check the provider-specific troubleshooting above.</p>"},{"location":"textual-tui/","title":"Textual TUI for AI Conventions","text":"<p>The AI Conventions template includes an optional Text User Interface (TUI) built with Textual for interactive installation and management.</p>"},{"location":"textual-tui/#features","title":"Features","text":"<ul> <li>Interactive Provider Selection: Choose which AI tools to configure with checkboxes</li> <li>Configuration Options: Toggle features like learning capture, context canary, and domain composition</li> <li>Live Installation Log: See real-time feedback as conventions are installed</li> <li>Cross-Platform: Works in any terminal that supports modern terminal features</li> </ul>"},{"location":"textual-tui/#usage","title":"Usage","text":""},{"location":"textual-tui/#running-the-tui","title":"Running the TUI","text":"<p>After generating your project and installing dependencies:</p> <pre><code>cd your-project\nuv tool install .\npython install.py --tui\n</code></pre>"},{"location":"textual-tui/#tui-interface","title":"TUI Interface","text":"<p>The TUI presents a split-screen interface:</p> <ol> <li>Left Panel - Provider Selection:</li> <li>Claude</li> <li>Cursor  </li> <li>Windsurf</li> <li>Aider</li> <li>Copilot</li> <li> <p>Codex</p> </li> <li> <p>Right Panel - Options:</p> </li> <li>Enable Learning Capture</li> <li>Enable Context Canary</li> <li> <p>Enable Domain Composition</p> </li> <li> <p>Bottom Panel - Installation Log:</p> </li> <li>Real-time installation progress</li> <li>Success/failure messages</li> <li>Installation paths</li> </ol>"},{"location":"textual-tui/#keyboard-shortcuts","title":"Keyboard Shortcuts","text":"<ul> <li><code>Tab</code> / <code>Shift+Tab</code>: Navigate between controls</li> <li><code>Space</code>: Toggle checkboxes</li> <li><code>Enter</code>: Activate buttons</li> <li><code>q</code>: Quit the application</li> <li><code>i</code>: Go to install screen</li> </ul>"},{"location":"textual-tui/#implementation-details","title":"Implementation Details","text":"<p>The TUI is implemented in <code>ai_conventions/tui.py</code> and includes:</p> <ul> <li><code>ConventionsTUI</code>: Main application class</li> <li><code>InstallScreen</code>: Primary installation interface</li> <li>Provider integration via the provider abstraction layer</li> <li>Configuration management integration</li> </ul>"},{"location":"textual-tui/#customization","title":"Customization","text":"<p>You can customize the TUI by modifying:</p> <ol> <li>Styling: Edit the CSS strings in the screen classes</li> <li>Layout: Modify the <code>compose()</code> methods to change widget arrangement</li> <li>Functionality: Add new screens or widgets for additional features</li> </ol>"},{"location":"textual-tui/#dependencies","title":"Dependencies","text":"<p>The TUI requires Textual, which is automatically included when you select this feature during project generation. The dependency is managed via <code>pyproject.toml</code>:</p> <pre><code>dependencies = [\n    \"textual&gt;=0.47.0\",\n    # ... other dependencies\n]\n</code></pre>"},{"location":"textual-tui/#future-enhancements","title":"Future Enhancements","text":"<p>Potential improvements to the TUI:</p> <ol> <li>Configuration Editor: Direct editing of config values</li> <li>Domain Manager: Browse and manage available domains</li> <li>Provider Status: Show current installation status for each provider</li> <li>Learning Review: Interface for reviewing and promoting learnings</li> <li>Update Checker: Check for template updates</li> </ol>"},{"location":"troubleshooting/","title":"Troubleshooting Guide","text":""},{"location":"troubleshooting/#common-issues-and-solutions","title":"Common Issues and Solutions","text":""},{"location":"troubleshooting/#my-ai-isnt-using-my-conventions","title":"\"My AI isn't using my conventions\"","text":"<p>This is the most common issue. Let's debug it step by step.</p>"},{"location":"troubleshooting/#1-verify-installation","title":"1. Verify Installation","text":"<p>First, check if your conventions are installed:</p> <pre><code># For Claude\nls -la ~/.claude/CLAUDE.md\n\n# Should show your file\n# If not, run ./install.py again\n</code></pre>"},{"location":"troubleshooting/#2-test-with-direct-question","title":"2. Test with Direct Question","text":"<p>Ask your AI directly:</p> <p>\"What coding conventions should I follow?\"</p> <p>If it doesn't mention your conventions, they're not loading.</p>"},{"location":"troubleshooting/#3-check-file-contents","title":"3. Check File Contents","text":"<pre><code>cat ~/.claude/CLAUDE.md | head -20\n\n# Should show your domains and patterns\n# If empty or wrong content, reinstall\n</code></pre>"},{"location":"troubleshooting/#4-force-reload","title":"4. Force Reload","text":"<p>Some AI tools cache contexts: - Claude: Start a new conversation - Cursor: Restart the app - Other tools: Check their documentation for context reloading</p>"},{"location":"troubleshooting/#5-explicit-reference","title":"5. Explicit Reference","text":"<p>As a test, explicitly mention your conventions:</p> <p>\"Following my conventions in CLAUDE.md, write a Python function to...\"</p> <p>If this works but implicit doesn't, it's a loading issue.</p>"},{"location":"troubleshooting/#installation-fails-with-permission-errors","title":"\"Installation fails with permission errors\"","text":"<pre><code># Error: Permission denied: '/home/user/.claude/CLAUDE.md'\n</code></pre> <p>Solution: <pre><code># Create directory with correct permissions\nmkdir -p ~/.claude\nchmod 755 ~/.claude\n\n# Then reinstall\n./install.py\n</code></pre></p>"},{"location":"troubleshooting/#domain-files-not-found-during-installation","title":"\"Domain files not found during installation\"","text":"<pre><code># Error: Domain 'python' not found\n</code></pre> <p>Causes and Solutions:</p> <ol> <li> <p>Missing community-domains:    <pre><code># Check if directory exists\nls community-domains/\n\n# If missing, you may need to clone properly\ngit clone https://github.com/safurrier/cookiecutter-ai-conventions-experimental\n</code></pre></p> </li> <li> <p>Wrong directory structure:    <pre><code># Ensure you're in the generated project\npwd  # Should show: /path/to/my-ai-conventions\n</code></pre></p> </li> </ol>"},{"location":"troubleshooting/#learning-capture-commands-not-working","title":"\"Learning capture commands not working\"","text":"<pre><code># Error: ./commands/capture-learning.py: Permission denied\n</code></pre> <p>Solution: <pre><code># Make scripts executable\nchmod +x commands/*.py\n\n# Or use Python directly\npython commands/capture-learning.py\n</code></pre></p>"},{"location":"troubleshooting/#conventions-work-sometimes-but-not-others","title":"\"Conventions work sometimes but not others\"","text":"<p>This usually means your AI is getting conflicting context.</p> <p>Debug Steps:</p> <ol> <li> <p>Check for duplicates:    <pre><code># Look for multiple CLAUDE.md files\nfind ~ -name \"CLAUDE.md\" 2&gt;/dev/null\n</code></pre></p> </li> <li> <p>Simplify your conventions:</p> </li> <li>Start with just one domain</li> <li>Make sure patterns don't conflict</li> <li> <p>Use clear, unambiguous rules</p> </li> <li> <p>Test isolated patterns:    <pre><code># Create a minimal test\necho \"Always use 'print' for debugging\" &gt; test-convention.md\n# Ask AI to debug something\n# It should use print\n</code></pre></p> </li> </ol>"},{"location":"troubleshooting/#my-team-cant-use-my-conventions","title":"\"My team can't use my conventions\"","text":"<p>When sharing conventions with your team:</p> <ol> <li> <p>Check Git repository:    <pre><code>git remote -v  # Ensure it's pushed\ngit status     # Check for uncommitted changes\n</code></pre></p> </li> <li> <p>Verify they're using correct URL:    <pre><code># They should run:\nuvx cookiecutter gh:yourteam/your-conventions-repo\n# NOT the original template\n</code></pre></p> </li> <li> <p>Check their installation:    <pre><code># Have them verify:\nls ~/.claude/CLAUDE.md\ncat ~/.claude/CLAUDE.md | grep \"your-domain\"\n</code></pre></p> </li> </ol>"},{"location":"troubleshooting/#cookiecutter-fails-with-template-errors","title":"\"Cookiecutter fails with template errors\"","text":"<pre><code># Error: Unable to find git reference 'main'\n</code></pre> <p>Solutions:</p> <ol> <li> <p>Use the correct branch:    <pre><code># If using a fork\nuvx cookiecutter gh:yourfork/repo --checkout main\n</code></pre></p> </li> <li> <p>Clone first approach:    <pre><code>git clone https://github.com/safurrier/cookiecutter-ai-conventions-experimental\ncd cookiecutter-ai-conventions-experimental\nuvx cookiecutter .\n</code></pre></p> </li> </ol>"},{"location":"troubleshooting/#my-custom-domain-isnt-showing-up","title":"\"My custom domain isn't showing up\"","text":"<p>You created a custom domain but it's not in the installer.</p> <p>Checklist:</p> <ol> <li> <p>Directory exists:    <pre><code>ls domains/yourcustom/\n# Should show your .md files\n</code></pre></p> </li> <li> <p>Registry updated (if needed):    <pre><code># Check if your domain needs registry entry\ngrep \"yourcustom\" community-domains/registry.json\n</code></pre></p> </li> <li> <p>Reinstall after changes:    <pre><code>./install.py\n# Your domain should appear in the list\n</code></pre></p> </li> </ol>"},{"location":"troubleshooting/#ai-suggests-outdated-patterns","title":"\"AI suggests outdated patterns\"","text":"<p>Your AI keeps suggesting old patterns even after updating conventions.</p> <p>Solutions:</p> <ol> <li> <p>Clear and reinstall:    <pre><code>rm ~/.claude/CLAUDE.md\n./install.py\n</code></pre></p> </li> <li> <p>Be more explicit:    <pre><code>## DEPRECATED Patterns\n\nNEVER use these patterns:\n- unittest.TestCase (use pytest instead)\n- print() for debugging (use logger)\n- Inline imports\n</code></pre></p> </li> <li> <p>Add positive examples:    <pre><code>ALWAYS use these patterns:\n- pytest fixtures for test setup\n- logger.debug() for debugging\n- Top-level imports\n</code></pre></p> </li> </ol>"},{"location":"troubleshooting/#bootstrap-script-fails","title":"\"Bootstrap script fails\"","text":"<pre><code># Error: curl: command not found\n</code></pre> <p>Alternative installation methods:</p> <ol> <li> <p>Install uv first, then use uvx:    <pre><code># Install uv if not already installed\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n# Then run the command\nuvx cookiecutter gh:safurrier/cookiecutter-ai-conventions\n</code></pre></p> </li> <li> <p>Manual installation:    <pre><code># Install uv first\npip install uv\n# Then use cookiecutter\nuvx cookiecutter gh:safurrier/cookiecutter-ai-conventions-experimental\n</code></pre></p> </li> <li> <p>Direct Python:    <pre><code>pip install cookiecutter\ncookiecutter gh:safurrier/cookiecutter-ai-conventions-experimental\n</code></pre></p> </li> </ol>"},{"location":"troubleshooting/#still-having-issues","title":"Still Having Issues?","text":"<ol> <li> <p>Check existing issues: GitHub Issues</p> </li> <li> <p>Open a new issue with:</p> </li> <li>Your OS and Python version</li> <li>Exact error message</li> <li>Steps to reproduce</li> <li> <p>What you've already tried</p> </li> <li> <p>Community help: Join our discussions for community support</p> </li> </ol> <p>Remember: Most issues are quick fixes. Don't hesitate to ask for help!</p>"},{"location":"tutorials/","title":"Step-by-Step Tutorials","text":""},{"location":"tutorials/#your-first-convention-stop-inline-imports","title":"Your First Convention: Stop Inline Imports","text":"<p>Let's fix the most annoying AI habit - inline imports.</p>"},{"location":"tutorials/#1-generate-your-conventions-repository","title":"1. Generate Your Conventions Repository","text":"<pre><code>uvx cookiecutter gh:safurrier/cookiecutter-ai-conventions\n</code></pre> <p>When prompted: - Project name: <code>my-conventions</code> (or your preference) - Select domains: Choose <code>python</code> and <code>git</code> to start - Enable learning capture: <code>yes</code> (recommended)</p>"},{"location":"tutorials/#2-add-your-first-convention","title":"2. Add Your First Convention","text":"<pre><code>cd my-conventions\necho \"## Import Style\n\nAlways put imports at the top of the file, never inline.\nGroup imports: standard library, third-party, local.\n\nGOOD:\n\\`\\`\\`python\nimport os\nimport sys\nfrom typing import Optional\n\nimport requests\nimport pandas as pd\n\nfrom myapp import utils\n\\`\\`\\`\n\nBAD:\n\\`\\`\\`python\ndef process_data():\n    import pandas as pd  # Never do this\n\\`\\`\\`\n\" &gt;&gt; domains/python/core.md\n</code></pre>"},{"location":"tutorials/#3-install-and-test","title":"3. Install and Test","text":"<pre><code>./install.py  # Installs to ~/.claude/CLAUDE.md\n</code></pre> <p>Now ask Claude to write a function that reads a CSV file. It should automatically put the pandas import at the top!</p>"},{"location":"tutorials/#team-onboarding-share-your-conventions","title":"Team Onboarding: Share Your Conventions","text":"<p>Got a new team member? Get them up to speed in minutes.</p>"},{"location":"tutorials/#1-push-your-conventions-to-git","title":"1. Push Your Conventions to Git","text":"<pre><code>git init\ngit add -A\ngit commit -m \"feat: initial team conventions\"\ngit remote add origin https://github.com/yourteam/conventions.git\ngit push -u origin main\n</code></pre>"},{"location":"tutorials/#2-new-team-member-setup","title":"2. New Team Member Setup","text":"<p>Send them one command: <pre><code># They run:\nuvx cookiecutter gh:yourteam/conventions\ncd team-conventions\n./install.py\n</code></pre></p>"},{"location":"tutorials/#3-theyre-ready","title":"3. They're Ready!","text":"<p>Your new team member's AI now knows: - Your commit message format - Your code style preferences - Your testing patterns - Your documentation standards</p> <p>No more onboarding documents that nobody reads!</p>"},{"location":"tutorials/#evolving-conventions-capture-as-you-code","title":"Evolving Conventions: Capture as You Code","text":"<p>You just discovered a pattern. Don't let it slip away!</p>"},{"location":"tutorials/#scenario-your-teams-api-error-format","title":"Scenario: Your Team's API Error Format","text":"<p>You're reviewing code and notice the AI suggested a generic error response. Your team has a specific format.</p>"},{"location":"tutorials/#1-capture-the-learning","title":"1. Capture the Learning","text":"<pre><code>./commands/capture-learning.py\n\n\ud83d\udcda Capture Development Learnings\n================================\n\nLearning title: Use standard API error response format\nContext: Code review on user service PR\nProblem: AI suggested returning {'error': message} for API errors\nSolution: Always use our standard format: {\n  'error': {\n    'code': 'ERROR_CODE',\n    'message': 'Human readable message',\n    'details': {} // optional\n  }\n}\nDomain: python\nPromote to: api_patterns.md\n</code></pre>"},{"location":"tutorials/#2-review-and-promote","title":"2. Review and Promote","text":"<p>After a week, review your learnings: <pre><code>./commands/review-learnings.py\n\n\ud83d\udcda Staged Learnings Review\n==========================\nTotal learnings: 3\n\nPYTHON (3 learnings):\n  - \"Use standard API error response format\" \u2713 READY\n  - \"Prefer explicit type hints for function returns\" (3 days old)\n  - \"Use dependency injection for external services\" (1 day old)\n</code></pre></p>"},{"location":"tutorials/#3-promote-stable-patterns","title":"3. Promote Stable Patterns","text":"<p>Edit <code>domains/python/api_patterns.md</code> and add your learning: <pre><code>## API Error Responses\n\nAlways return errors in our standard format:\n```python\n{\n    'error': {\n        'code': 'USER_NOT_FOUND',\n        'message': 'The requested user does not exist',\n        'details': {'user_id': user_id}\n    }\n}\n</code></pre> <pre><code>Now your entire team's AI assistants know the pattern!\n\n---\n\n## Custom Domain: Create Conventions for Your Stack\n\nYour team uses a specific tech stack. Create a custom domain for it.\n\n### Example: FastAPI Conventions\n\n### 1. Create the Domain Structure\n\n```bash\nmkdir -p domains/fastapi\n</code></pre></p>"},{"location":"tutorials/#2-define-your-patterns","title":"2. Define Your Patterns","text":"<p>Create <code>domains/fastapi/core.md</code>: <pre><code># FastAPI Conventions\n\n## Dependency Injection\n\nAlways use FastAPI's dependency injection for:\n- Database sessions\n- Authentication\n- External services\n\n```python\nfrom fastapi import Depends\nfrom sqlalchemy.orm import Session\nfrom app.database import get_db\nfrom app.auth import get_current_user\nfrom app.models import User\n\n@router.get(\"/items\")\nasync def get_items(\n    db: Session = Depends(get_db),\n    current_user: User = Depends(get_current_user),\n    skip: int = 0,\n    limit: int = 100\n):\n    return db.query(Item).offset(skip).limit(limit).all()\n</code></pre></p>"},{"location":"tutorials/#response-models","title":"Response Models","text":"<p>Always use Pydantic models for responses:</p> <p><pre><code>class ItemResponse(BaseModel):\n    id: int\n    name: str\n    created_at: datetime\n\n    class Config:\n        from_attributes = True\n\n@router.get(\"/items/{item_id}\", response_model=ItemResponse)\nasync def get_item(item_id: int, db: Session = Depends(get_db)):\n    return db.query(Item).filter(Item.id == item_id).first()\n</code></pre> <pre><code>### 3. Add to Registry\n\nEdit `domains/registry.md`:\n```markdown\n## Custom Domains\n\n### fastapi\nFastAPI-specific patterns and best practices for building APIs.\n</code></pre></p>"},{"location":"tutorials/#4-reinstall","title":"4. Reinstall","text":"<pre><code>./install.py\n# Select your new 'fastapi' domain\n</code></pre> <p>Your AI now knows FastAPI patterns!</p>"},{"location":"tutorials/#debugging-when-conventions-arent-loading","title":"Debugging: When Conventions Aren't Loading","text":""},{"location":"tutorials/#check-installation","title":"Check Installation","text":"<pre><code># Verify CLAUDE.md exists\ncat ~/.claude/CLAUDE.md\n\n# Should show your domains\n</code></pre>"},{"location":"tutorials/#test-with-a-simple-prompt","title":"Test with a Simple Prompt","text":"<p>Ask your AI:</p> <p>\"What are my coding conventions?\"</p> <p>It should list your installed domains.</p>"},{"location":"tutorials/#force-reload","title":"Force Reload","text":"<p>Some AI tools cache contexts. Try: 1. Restart your AI tool 2. Open a new conversation 3. Explicitly mention you want to follow your conventions</p>"},{"location":"tutorials/#still-not-working","title":"Still Not Working?","text":"<p>Check our troubleshooting guide or open an issue.</p>"},{"location":"examples/migration-from-cursorrules/","title":"Example: Migrating from .cursorrules","text":"<p>This example shows how to migrate an existing <code>.cursorrules</code> file to the cookiecutter-ai-conventions format.</p>"},{"location":"examples/migration-from-cursorrules/#original-cursorrules","title":"Original .cursorrules","text":"<pre><code>You are an expert full-stack developer specializing in React and Node.js.\n\nCode Style:\n- Use functional components with TypeScript\n- Prefer hooks over class components  \n- Follow Airbnb ESLint configuration\n- Use named exports over default exports\n- Keep components small and focused\n\nTesting:\n- Write tests for all new components\n- Use React Testing Library\n- Aim for 80% code coverage\n- Test user behavior, not implementation details\n\nGit:\n- Use conventional commits (feat, fix, docs, etc.)\n- Keep commits atomic and focused\n- Write descriptive commit messages\n\nAPI Development:\n- RESTful endpoints with clear naming\n- Always validate input data\n- Return consistent error responses\n- Document all endpoints with OpenAPI\n\nGeneral:\n- Write self-documenting code\n- Add JSDoc comments for complex functions\n- Keep functions under 20 lines\n- Prefer composition over inheritance\n</code></pre>"},{"location":"examples/migration-from-cursorrules/#migrated-structure","title":"Migrated Structure","text":""},{"location":"examples/migration-from-cursorrules/#1-globalmd","title":"1. global.md","text":"<pre><code># Global Development Standards\n\n## Code Quality\n- Write self-documenting code with clear variable and function names\n- Keep functions concise and focused (under 20 lines)\n- Add JSDoc comments for complex functions\n- Prefer composition over inheritance in design patterns\n\n## Development Workflow\n- Follow test-driven development practices\n- Maintain consistent code style across the project\n- Document architectural decisions\n</code></pre>"},{"location":"examples/migration-from-cursorrules/#2-domainsjavascriptcoremd","title":"2. domains/javascript/core.md","text":"<pre><code># JavaScript/TypeScript Development\n\n## When This Applies\n- Working with .js, .jsx, .ts, .tsx files\n- Creating React components or Node.js modules\n- Keywords: component, function, React, TypeScript, JavaScript\n\n## Conventions\n\n### Language Preferences\n- Use TypeScript for all new files\n- Prefer functional programming patterns\n- Use async/await over callbacks or raw promises\n\n### Module Structure\n- Use named exports over default exports\n- Keep modules focused on a single responsibility\n- Organize imports: external \u2192 internal \u2192 relative\n\n### Code Style\n- Follow Airbnb ESLint configuration\n- Use 2 spaces for indentation\n- Place opening braces on the same line\n</code></pre>"},{"location":"examples/migration-from-cursorrules/#3-domainsreactcoremd","title":"3. domains/react/core.md","text":"<pre><code># React Development\n\n## When This Applies\n- Creating or modifying React components\n- Working with .jsx or .tsx files\n- Keywords: component, useState, useEffect, React\n\n## Conventions\n\n### Component Architecture\n- Use functional components with TypeScript\n- Prefer hooks over class components\n- Keep components small and focused\n- Extract complex logic into custom hooks\n\n### Component Organization\n- One component per file\n- Co-locate tests with components\n- Group related components in feature folders\n\n### State Management\n- Use local state for component-specific data\n- Lift state up when needed by multiple components\n- Consider Context API before reaching for external libraries\n</code></pre>"},{"location":"examples/migration-from-cursorrules/#4-domainstestingcoremd","title":"4. domains/testing/core.md","text":"<pre><code># Testing Standards\n\n## When This Applies\n- Writing test files (*.test.*, *.spec.*)\n- Keywords: test, describe, it, expect\n- Creating new features or fixing bugs\n\n## Conventions\n\n### Test Structure\n- Write tests for all new components and functions\n- Use React Testing Library for component tests\n- Organize tests with clear describe blocks\n- Name tests to describe expected behavior\n\n### Testing Philosophy\n- Test user behavior, not implementation details\n- Aim for 80% code coverage\n- Write integration tests for critical paths\n- Keep tests independent and isolated\n\n### Test Organization\n- Co-locate test files with source code\n- Use *.test.ts or *.spec.ts naming convention\n- Group related tests in describe blocks\n</code></pre>"},{"location":"examples/migration-from-cursorrules/#5-domainsgitcoremd","title":"5. domains/git/core.md","text":"<pre><code># Git Workflow\n\n## When This Applies\n- Creating commits, branches, or pull requests\n- Keywords: commit, branch, merge, PR\n\n## Conventions\n\n### Commit Messages\n- Use conventional commits format:\n  - feat: new feature\n  - fix: bug fix\n  - docs: documentation changes\n  - style: formatting changes\n  - refactor: code restructuring\n  - test: test additions or modifications\n  - chore: maintenance tasks\n\n### Commit Practices\n- Keep commits atomic and focused\n- Write descriptive commit messages\n- Include ticket number when applicable\n- Example: \"feat(auth): add OAuth2 integration (#123)\"\n\n### Branch Strategy\n- Create feature branches from main\n- Use descriptive branch names\n- Delete branches after merging\n</code></pre>"},{"location":"examples/migration-from-cursorrules/#6-domainsapicoremd","title":"6. domains/api/core.md","text":"<pre><code># API Development\n\n## When This Applies\n- Creating or modifying API endpoints\n- Working with Express, Fastify, or similar\n- Keywords: endpoint, route, REST, API\n\n## Conventions\n\n### Endpoint Design\n- Follow RESTful naming conventions\n- Use nouns for resources, not verbs\n- Support standard HTTP methods\n- Examples:\n  - GET /api/users\n  - POST /api/users\n  - GET /api/users/:id\n  - PUT /api/users/:id\n  - DELETE /api/users/:id\n\n### Data Handling\n- Always validate input data\n- Use middleware for common validations\n- Sanitize user inputs\n- Return consistent response formats\n\n### Error Handling\n- Return consistent error responses\n- Include error code and message\n- Use appropriate HTTP status codes\n- Example error format:\n  ```json\n  {\n    \"error\": {\n      \"code\": \"VALIDATION_ERROR\",\n      \"message\": \"Invalid email format\",\n      \"field\": \"email\"\n    }\n  }\n  ```\n\n### Documentation\n- Document all endpoints with OpenAPI/Swagger\n- Include request/response examples\n- Specify required vs optional parameters\n- Document error responses\n</code></pre>"},{"location":"examples/migration-from-cursorrules/#how-to-use-this-migration","title":"How to Use This Migration","text":"<ol> <li> <p>Generate your new project:    <pre><code>uvx cookiecutter gh:safurrier/cookiecutter-ai-conventions\n</code></pre></p> </li> <li> <p>Select providers (e.g., cursor) and domains (e.g., javascript, react, testing, git, api)</p> </li> <li> <p>Replace the generated domain files with the migrated content above</p> </li> <li> <p>Customize further based on your team's specific needs</p> </li> <li> <p>Test with your AI coding assistant to ensure conventions are being followed</p> </li> </ol>"},{"location":"examples/migration-from-cursorrules/#tips-for-successful-migration","title":"Tips for Successful Migration","text":"<ul> <li>Start with the most important conventions first</li> <li>Test incrementally - don't migrate everything at once</li> <li>Get team feedback on the organization</li> <li>Iterate based on real usage</li> <li>Consider creating custom domains for project-specific conventions</li> </ul>"},{"location":"examples/migration-from-team-wiki/","title":"Example: Migrating from Team Wiki/Google Docs","text":"<p>This example shows how to migrate conventions from unstructured team documentation to the cookiecutter-ai-conventions format.</p>"},{"location":"examples/migration-from-team-wiki/#original-team-wiki-content","title":"Original Team Wiki Content","text":"<pre><code>ACME Corp Development Standards\nLast Updated: 2024-01-15\n\n1. Python Development\n   - Use Python 3.11+\n   - Follow PEP 8 with 100 char line limit\n   - Use type hints for all functions\n   - Docstrings required for public functions\n   - Use Black for formatting\n   - Use Ruff for linting\n\n2. Database Guidelines\n   - All tables must have created_at and updated_at\n   - Use UUIDs for primary keys\n   - Name foreign keys as {table}_{column}_fkey\n   - Migrations must be reversible\n   - No direct SQL in application code\n\n3. API Standards\n   - All APIs must be versioned (/api/v1/)\n   - Use camelCase for JSON fields\n   - Include request ID in headers\n   - Rate limit all public endpoints\n   - Return 429 for rate limit exceeded\n\n4. Security Requirements\n   - No secrets in code\n   - Use environment variables\n   - Rotate API keys quarterly\n   - Log security events\n   - OWASP Top 10 compliance\n\n5. Code Review Process\n   - At least 2 approvals required\n   - Must pass all CI checks\n   - Security review for auth changes\n   - Performance review for DB changes\n</code></pre>"},{"location":"examples/migration-from-team-wiki/#migrated-structure","title":"Migrated Structure","text":""},{"location":"examples/migration-from-team-wiki/#1-globalmd","title":"1. global.md","text":"<pre><code># ACME Corp Global Standards\n\n## Development Philosophy\n- Prioritize code security and maintainability\n- Follow established style guides for each language\n- Maintain backward compatibility\n- Document all architectural decisions\n\n## Security First\n- No secrets in code - use environment variables\n- Follow OWASP Top 10 guidelines\n- Log all security-relevant events\n- Rotate credentials quarterly\n\n## Code Review Requirements\n- Minimum 2 approvals for all PRs\n- All CI checks must pass\n- Security review required for authentication changes\n- Performance review required for database changes\n</code></pre>"},{"location":"examples/migration-from-team-wiki/#2-domainspythoncoremd","title":"2. domains/python/core.md","text":"<pre><code># Python Development Standards\n\n## When This Applies\n- Working with .py files\n- Creating Python modules or packages\n- Keywords: Python, function, class, import\n\n## Conventions\n\n### Language Requirements\n- Use Python 3.11 or higher\n- Include type hints for all function signatures\n- Write docstrings for all public functions and classes\n\n### Code Style\n- Follow PEP 8 with 100 character line limit\n- Use Black for automatic formatting\n- Use Ruff for linting\n- Configure both in pyproject.toml\n\n### Function Design\n```python\ndef calculate_total(\n    items: list[OrderItem],\n    discount: Decimal = Decimal(\"0\")\n) -&gt; Decimal:\n    \"\"\"Calculate order total with optional discount.\n\n    Args:\n        items: List of order items\n        discount: Discount percentage (0-100)\n\n    Returns:\n        Total amount after discount\n    \"\"\"\n    subtotal = sum(item.price * item.quantity for item in items)\n    return subtotal * (1 - discount / 100)\n</code></pre>"},{"location":"examples/migration-from-team-wiki/#import-organization","title":"Import Organization","text":"<ul> <li>Standard library imports first</li> <li>Third-party imports second  </li> <li>Local application imports last</li> <li>Alphabetical order within groups <pre><code>### 3. domains/database/core.md\n```markdown\n# Database Development\n\n## When This Applies\n- Creating or modifying database schemas\n- Writing migrations\n- Keywords: table, migration, SQL, database, query\n\n## Conventions\n\n### Table Design\n- All tables must include:\n  - `id` (UUID primary key)\n  - `created_at` (timestamp with timezone)\n  - `updated_at` (timestamp with timezone)\n\n### Naming Conventions\n- Table names: plural, snake_case (e.g., `user_accounts`)\n- Column names: snake_case\n- Foreign keys: `{table}_{column}_fkey`\n- Indexes: `idx_{table}_{columns}`\n\n### Migration Requirements\n- All migrations must be reversible\n- Test rollback before deploying\n- Include clear up and down methods\n- Name format: `YYYYMMDD_HHMMSS_description.py`\n\n### Query Patterns\n- No direct SQL in application code\n- Use ORM or query builder\n- Parameterize all queries\n- Add query comments for complex operations\n\nExample migration:\n```python\ndef upgrade():\n    op.create_table(\n        'user_accounts',\n        sa.Column('id', postgresql.UUID(), primary_key=True),\n        sa.Column('email', sa.String(255), nullable=False, unique=True),\n        sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),\n        sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False)\n    )\n    op.create_index('idx_user_accounts_email', 'user_accounts', ['email'])\n\ndef downgrade():\n    op.drop_index('idx_user_accounts_email')\n    op.drop_table('user_accounts')\n</code></pre> <pre><code>### 4. domains/api/core.md\n```markdown\n# API Development Standards\n\n## When This Applies\n- Creating REST API endpoints\n- Modifying API responses\n- Keywords: API, endpoint, REST, HTTP, route\n\n## Conventions\n\n### API Structure\n- Version all APIs: `/api/v1/resource`\n- Use RESTful resource naming\n- Support standard HTTP methods\n- Include API version in headers\n\n### Response Format\n- Use camelCase for all JSON fields\n- Include request ID in response headers\n- Consistent error response structure:\n```json\n{\n  \"error\": {\n    \"code\": \"VALIDATION_ERROR\",\n    \"message\": \"Invalid input\",\n    \"details\": {\n      \"field\": \"email\",\n      \"reason\": \"Invalid format\"\n    }\n  },\n  \"requestId\": \"req_123abc\"\n}\n</code></pre></li> </ul>"},{"location":"examples/migration-from-team-wiki/#rate-limiting","title":"Rate Limiting","text":"<ul> <li>Implement rate limiting on all public endpoints</li> <li>Return 429 status for exceeded limits</li> <li>Include rate limit headers:</li> <li><code>X-RateLimit-Limit</code></li> <li><code>X-RateLimit-Remaining</code></li> <li><code>X-RateLimit-Reset</code></li> </ul>"},{"location":"examples/migration-from-team-wiki/#api-documentation","title":"API Documentation","text":"<ul> <li>Document with OpenAPI 3.0</li> <li>Include examples for all endpoints</li> <li>Specify authentication requirements</li> <li>List all possible error codes <pre><code>### 5. domains/security/core.md\n```markdown\n# Security Standards\n\n## When This Applies\n- Handling sensitive data\n- Authentication/authorization code\n- Keywords: password, token, auth, secure, encrypt\n\n## Conventions\n\n### Credential Management\n- Never commit secrets to version control\n- Use environment variables for all credentials\n- Rotate API keys quarterly\n- Use key management service in production\n\n### Authentication\n- Use bcrypt for password hashing\n- Implement proper session management\n- Enable MFA for privileged accounts\n- Log all authentication events\n\n### Data Protection\n- Encrypt sensitive data at rest\n- Use TLS for all communications\n- Implement input validation\n- Sanitize all user inputs\n\n### Security Logging\n- Log all security events:\n  - Failed login attempts\n  - Permission changes\n  - Data access to sensitive resources\n- Include timestamp, user, IP, and action\n- Forward logs to SIEM system\n</code></pre></li> </ul>"},{"location":"examples/migration-from-team-wiki/#migration-steps","title":"Migration Steps","text":"<ol> <li>Analyze your existing documentation to identify distinct domains</li> <li>Group related conventions together</li> <li>Convert passive descriptions to active voice commands</li> <li>Add triggering contexts for each domain</li> <li>Test with your team to ensure nothing was missed</li> </ol>"},{"location":"examples/migration-from-team-wiki/#benefits-after-migration","title":"Benefits After Migration","text":"<ul> <li>\u2705 AI assistants understand context better</li> <li>\u2705 Conventions are easier to update and maintain</li> <li>\u2705 New team members onboard faster</li> <li>\u2705 Consistent format across all tools</li> <li>\u2705 Version controlled with change history</li> </ul>"},{"location":"reference/api/","title":"API Reference","text":"<p>This section provides comprehensive API documentation for the AI Conventions system.</p> <p>Template Documentation</p> <p>This is the API reference for the cookiecutter template. When you generate a project, the API will be available under your project's module structure.</p>"},{"location":"reference/api/#overview","title":"Overview","text":"<p>The AI Conventions system consists of several core modules:</p>"},{"location":"reference/api/#core-components","title":"Core Components","text":"<ul> <li>Domain Resolver: Handles domain inheritance and composition</li> <li>Provider System: Manages AI tool integrations (Claude, Cursor, Windsurf, etc.)</li> <li>CLI System: Command-line interface for managing conventions</li> <li>Learning Capture: Automatic pattern detection and evolution</li> <li>Configuration: Project and global settings management</li> </ul>"},{"location":"reference/api/#module-structure","title":"Module Structure","text":"<pre><code>ai_conventions/\n\u251c\u2500\u2500 __init__.py           # Package initialization\n\u251c\u2500\u2500 cli.py               # Command-line interface\n\u251c\u2500\u2500 config.py            # Configuration management\n\u251c\u2500\u2500 domain_resolver.py   # Domain inheritance system\n\u251c\u2500\u2500 capture.py           # Learning capture system\n\u251c\u2500\u2500 sync.py              # Provider synchronization\n\u251c\u2500\u2500 tui.py              # Text user interface\n\u2514\u2500\u2500 providers/          # Provider implementations\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 base.py         # Base provider interface\n    \u251c\u2500\u2500 claude.py       # Claude provider\n    \u251c\u2500\u2500 cursor.py       # Cursor provider\n    \u251c\u2500\u2500 windsurf.py     # Windsurf provider\n    \u251c\u2500\u2500 aider.py        # Aider provider\n    \u2514\u2500\u2500 ...\n</code></pre>"},{"location":"reference/api/#key-classes-and-functions","title":"Key Classes and Functions","text":""},{"location":"reference/api/#domain-resolution","title":"Domain Resolution","text":"<p>The domain resolver handles loading and composing convention domains:</p> <pre><code>from ai_conventions.domain_resolver import DomainResolver, resolve_shorthand_syntax\n\n# Create resolver\nresolver = DomainResolver(domains_path=Path(\"domains\"))\n\n# Resolve domain with inheritance\ncontent = resolver.resolve_domain(\"testing\")\n\n# Convert shorthand syntax\ntext = \"Use %testing patterns\"\nresolved = resolve_shorthand_syntax(text)\n# Result: \"Use @domains/testing/core.md patterns\"\n</code></pre>"},{"location":"reference/api/#provider-system","title":"Provider System","text":"<p>Base provider interface for AI tool integrations:</p> <pre><code>from ai_conventions.providers.base import BaseProvider, ProviderCapabilities\n\nclass MyProvider(BaseProvider):\n    @property\n    def name(self) -&gt; str:\n        return \"my-tool\"\n\n    @property\n    def capabilities(self) -&gt; ProviderCapabilities:\n        return ProviderCapabilities(\n            supports_imports=True,\n            supports_commands=True,\n            max_context_tokens=100_000,\n            file_watch_capable=False,\n            symlink_capable=True,\n            config_format='markdown'\n        )\n</code></pre>"},{"location":"reference/api/#cli-usage","title":"CLI Usage","text":"<p>The CLI provides commands for managing conventions:</p> <pre><code>from ai_conventions.cli import main\n\n# Available commands:\n# - ai-conventions status\n# - ai-conventions list  \n# - ai-conventions sync\n# - capture-learning\n</code></pre>"},{"location":"reference/api/#configuration-schema","title":"Configuration Schema","text":"<p>Configuration files use YAML format:</p> <pre><code># .ai-conventions.yaml\nproject:\n  name: \"My Project\"\n  author: \"Your Name\"\n\nproviders:\n  claude:\n    enabled: true\n    auto_sync: true\n    use_symlinks: true\n\ndomains:\n  default: [git, testing, writing]\n\nlearning_capture:\n  enabled: true\n  auto_review: weekly\n</code></pre>"},{"location":"reference/api/#extension-points","title":"Extension Points","text":""},{"location":"reference/api/#custom-providers","title":"Custom Providers","text":"<p>Create custom AI tool providers:</p> <pre><code>from ai_conventions.providers.base import BaseProvider\n\nclass CustomProvider(BaseProvider):\n    # Implement required methods\n    def install(self) -&gt; InstallResult:\n        # Custom installation logic\n        pass\n</code></pre>"},{"location":"reference/api/#custom-domains","title":"Custom Domains","text":"<p>Create domain files with YAML frontmatter:</p> <pre><code>---\nextends: base-domain\ntriggers: [\"custom\", \"keywords\"]\n---\n\n# Custom Domain\n\nCustom conventions and patterns...\n</code></pre>"},{"location":"reference/api/#development","title":"Development","text":"<p>For development and testing:</p> <pre><code># Install in development mode\nuv tool install --editable .\n\n# Run tests\nuv run pytest\n\n# Build documentation\nuv run mkdocs build\n</code></pre>"},{"location":"reference/cli/","title":"CLI Reference","text":"<p>The AI Conventions CLI provides commands for managing convention domains, syncing with AI providers, and capturing learnings.</p>"},{"location":"reference/cli/#installation","title":"Installation","text":"<pre><code># Install from your generated project\ncd your-project\nuv tool install .\n\n# Or install in development mode\nuv tool install --editable .\n</code></pre>"},{"location":"reference/cli/#core-commands","title":"Core Commands","text":""},{"location":"reference/cli/#ai-conventions-status","title":"<code>ai-conventions status</code>","text":"<p>Check installation status for all AI providers.</p> <pre><code>ai-conventions status\n</code></pre> <p>Output: <pre><code>AI Provider Status:\n\n\u2705 Claude: Installed at ~/.claude\n   - CLAUDE.md: \u2705 Present\n   - domains/: \u2705 Synced (3 domains)\n   - Commands: \u2705 Available\n\n\u274c Cursor: Not configured\n   - .cursorrules: \u274c Missing\n   - .cursor/: \u274c Not found\n\n\ud83d\udd04 Windsurf: Partially configured\n   - .windsurfrules: \u2705 Present\n   - Conventions: \u26a0\ufe0f  Out of sync\n</code></pre></p>"},{"location":"reference/cli/#ai-conventions-list","title":"<code>ai-conventions list</code>","text":"<p>List all available convention domains and their descriptions.</p> <pre><code>ai-conventions list\n\n# Filter by domain type\nai-conventions list --type core\nai-conventions list --type custom\n</code></pre> <p>Output: <pre><code>Available Convention Domains:\n\nCore Domains:\n  git          Git workflows and commit standards\n  testing      Testing patterns and philosophy  \n  writing      Technical writing and documentation\n\nCustom Domains:\n  api-design   REST API design principles\n  security     Security best practices\n</code></pre></p>"},{"location":"reference/cli/#ai-conventions-sync","title":"<code>ai-conventions sync</code>","text":"<p>Sync conventions to configured AI providers.</p> <pre><code># Sync to all providers\nai-conventions sync\n\n# Sync to specific provider\nai-conventions sync --provider claude\nai-conventions sync --provider cursor\n\n# Force sync (overwrite existing)\nai-conventions sync --force\n\n# Dry run (show what would be synced)\nai-conventions sync --dry-run\n</code></pre> <p>Options: - <code>--provider</code>: Target specific provider - <code>--force</code>: Overwrite existing files - <code>--dry-run</code>: Preview changes without applying - <code>--verbose</code>: Show detailed output</p>"},{"location":"reference/cli/#learning-capture-commands","title":"Learning Capture Commands","text":""},{"location":"reference/cli/#capture-learning","title":"<code>capture-learning</code>","text":"<p>Capture development learnings and patterns for future use.</p> <pre><code># Basic usage\ncapture-learning \"Always use type hints for public functions\"\n\n# With domain and category\ncapture-learning \"Mock external APIs in tests\" --domain testing --category pattern\n\n# Interactive mode\ncapture-learning\n</code></pre> <p>Options: - <code>--domain, -d</code>: Target domain for the learning - <code>--file, -f</code>: Append to specific staging file - <code>--category, -c</code>: Learning category (pattern, fix, anti-pattern, tool-specific, other)</p> <p>Categories: - pattern: Best practices and recommended approaches - fix: Solutions to common problems - anti-pattern: Things to avoid - tool-specific: Tool or framework specific guidance - other: General insights</p> <p>Examples:</p> <pre><code># Capture a coding pattern\ncapture-learning \"Use pathlib instead of os.path for file operations\" \\\n  --domain python --category pattern\n\n# Capture an anti-pattern\ncapture-learning \"Avoid global variables for configuration\" \\\n  --domain global --category anti-pattern\n\n# Capture a fix\ncapture-learning \"Use scope='class' for expensive test fixtures\" \\\n  --domain testing --category fix\n\n# Interactive mode with prompts\ncapture-learning\n# Prompts will guide you through:\n# - What pattern or learning did you discover?\n# - Which domain does this belong to?\n# - Category selection\n</code></pre>"},{"location":"reference/cli/#learning-management","title":"Learning Management","text":"<pre><code># Review captured learnings\nai-conventions review\n\n# Promote learnings to domains\nai-conventions promote --learning-id 123\n\n# Archive old learnings\nai-conventions archive --older-than 30d\n</code></pre>"},{"location":"reference/cli/#configuration-commands","title":"Configuration Commands","text":""},{"location":"reference/cli/#ai-conventions-config","title":"<code>ai-conventions config</code>","text":"<p>Manage configuration settings.</p> <pre><code># Show current configuration\nai-conventions config show\n\n# Set provider preferences\nai-conventions config set providers.claude.auto_sync true\nai-conventions config set providers.cursor.use_symlinks false\n\n# List available domains\nai-conventions config domains list\n\n# Add custom domain\nai-conventions config domains add my-domain ./domains/my-domain/\n</code></pre>"},{"location":"reference/cli/#advanced-usage","title":"Advanced Usage","text":""},{"location":"reference/cli/#workflow-examples","title":"Workflow Examples","text":"<p>Daily Development Workflow: <pre><code># 1. Check status\nai-conventions status\n\n# 2. Start coding with AI assistant\n# (AI automatically loads relevant conventions)\n\n# 3. Capture learnings from AI interactions\ncapture-learning \"User corrected commit message format\" \\\n  --domain git --category fix\n\n# 4. Sync updates to all providers\nai-conventions sync\n</code></pre></p> <p>Convention Maintenance: <pre><code># Review and organize captured learnings\nai-conventions review\n\n# Update domains based on learnings\nai-conventions promote --interactive\n\n# Sync updated conventions\nai-conventions sync --force\n</code></pre></p>"},{"location":"reference/cli/#debug-and-troubleshooting","title":"Debug and Troubleshooting","text":"<pre><code># Verbose output for debugging\nai-conventions status --verbose\nai-conventions sync --verbose --dry-run\n\n# Check configuration\nai-conventions config validate\n\n# Reset provider configuration\nai-conventions reset --provider claude --confirm\n</code></pre>"},{"location":"reference/cli/#exit-codes","title":"Exit Codes","text":"Code Meaning 0 Success 1 General error 2 Configuration error 3 Provider error 4 Domain not found 5 Sync failed"},{"location":"reference/cli/#environment-variables","title":"Environment Variables","text":"Variable Description Default <code>AI_CONVENTIONS_HOME</code> Base directory for conventions <code>~/.ai-conventions</code> <code>AI_CONVENTIONS_CONFIG</code> Configuration file path <code>~/.ai-conventions.yaml</code> <code>AI_CONVENTIONS_DEBUG</code> Enable debug logging <code>false</code>"},{"location":"reference/cli/#configuration-file","title":"Configuration File","text":"<p>The configuration file (<code>.ai-conventions.yaml</code>) supports:</p> <pre><code>providers:\n  claude:\n    enabled: true\n    auto_sync: true\n    use_symlinks: true\n  cursor:\n    enabled: true\n    auto_sync: false\n\ndomains:\n  default: [git, testing, writing]\n  custom_paths:\n    - ./custom-domains/\n\nlearning_capture:\n  enabled: true\n  auto_review: weekly\n  archive_after: 90d\n</code></pre>"},{"location":"reference/configuration/","title":"Configuration Reference","text":"<p>The AI Conventions system uses YAML configuration files for customization and provider settings.</p>"},{"location":"reference/configuration/#configuration-files","title":"Configuration Files","text":""},{"location":"reference/configuration/#project-configuration-ai-conventionsyaml","title":"Project Configuration (<code>.ai-conventions.yaml</code>)","text":"<p>Located in your project root, this file controls project-specific settings:</p> <pre><code># Project metadata\nproject:\n  name: \"My AI Project\"\n  author: \"Your Name\"\n  description: \"AI development conventions for my project\"\n\n# Provider configuration\nproviders:\n  claude:\n    enabled: true\n    auto_sync: true\n    use_symlinks: true\n    install_path: \"~/.claude\"\n\n  cursor:\n    enabled: true\n    auto_sync: false\n    use_symlinks: false\n    install_path: \".cursorrules\"\n\n  windsurf:\n    enabled: false\n\n  aider:\n    enabled: true\n    auto_sync: true\n\n# Domain settings\ndomains:\n  # Default domains to include\n  default: \n    - git\n    - testing\n    - writing\n\n  # Custom domain paths\n  custom_paths:\n    - \"./custom-domains/\"\n    - \"~/shared-domains/\"\n\n  # Domain composition settings\n  composition:\n    enabled: true\n    max_depth: 3\n    circular_check: true\n\n# Learning capture system\nlearning_capture:\n  enabled: true\n  auto_review: \"weekly\"  # never, daily, weekly, monthly\n  archive_after: \"90d\"   # Archive learnings after N days\n  categories:\n    - pattern\n    - fix\n    - anti-pattern\n    - tool-specific\n    - other\n\n# Context detection\ncontext_detection:\n  enabled: true\n  triggers:\n    git: [\"git\", \"commit\", \"branch\", \"merge\", \"rebase\"]\n    testing: [\"test_\", \"pytest\", \"assert\", \"fixture\"]\n    writing: [\"README\", \"docs\", \"commit message\"]\n\n# Advanced settings\nadvanced:\n  template_engine: \"jinja2\"\n  context_compression: true\n  canary_system: true\n  debug_mode: false\n</code></pre>"},{"location":"reference/configuration/#global-configuration-ai-conventionsconfigyaml","title":"Global Configuration (<code>~/.ai-conventions/config.yaml</code>)","text":"<p>System-wide settings that apply across all projects:</p> <pre><code># Global preferences\nglobal:\n  default_providers: [claude, cursor]\n  auto_update_check: true\n  telemetry: false\n\n# Provider defaults\nprovider_defaults:\n  use_symlinks: true\n  auto_sync: true\n  backup_on_sync: true\n\n# Domain registry\ndomain_registry:\n  # Community domain sources\n  sources:\n    - url: \"https://github.com/ai-conventions/community-domains\"\n      branch: \"main\"\n      update_frequency: \"weekly\"\n\n  # Local domain collections\n  local_collections:\n    - path: \"~/domains/work/\"\n      name: \"Work Domains\"\n    - path: \"~/domains/personal/\"\n      name: \"Personal Domains\"\n\n# CLI preferences\ncli:\n  default_output_format: \"rich\"  # rich, plain, json\n  confirmation_prompts: true\n  color_output: true\n</code></pre>"},{"location":"reference/configuration/#provider-specific-configuration","title":"Provider-Specific Configuration","text":""},{"location":"reference/configuration/#claude-provider","title":"Claude Provider","text":"<pre><code>providers:\n  claude:\n    enabled: true\n\n    # Installation settings\n    install_path: \"~/.claude\"\n    use_symlinks: true\n    backup_existing: true\n\n    # Sync behavior\n    auto_sync: true\n    sync_on_change: true\n\n    # Template settings\n    template_path: \"./templates/claude/\"\n    context_variables:\n      canary_timestamp: true\n      project_info: true\n\n    # Features\n    features:\n      learning_capture: true\n      domain_composition: true\n      context_canary: true\n      shorthand_syntax: true\n</code></pre>"},{"location":"reference/configuration/#cursor-provider","title":"Cursor Provider","text":"<pre><code>providers:\n  cursor:\n    enabled: true\n\n    # File configuration\n    rules_file: \".cursorrules\"\n    config_dir: \".cursor/\"\n\n    # Installation mode\n    use_symlinks: false  # Cursor works better with copies\n\n    # Content settings\n    include_imports: true\n    include_context_mapping: true\n    max_file_size: \"50KB\"\n\n    # Rule formatting\n    format:\n      line_length: 80\n      include_examples: true\n      group_by_domain: true\n</code></pre>"},{"location":"reference/configuration/#windsurf-provider","title":"Windsurf Provider","text":"<pre><code>providers:\n  windsurf:\n    enabled: true\n\n    # Configuration files\n    rules_file: \".windsurfrules\"\n    config_dir: \".windsurf/\"\n\n    # Features\n    features:\n      cascading_rules: true\n      project_context: true\n      file_watchers: true\n\n    # Performance\n    performance:\n      lazy_loading: true\n      cache_rules: true\n      max_context_size: \"100KB\"\n</code></pre>"},{"location":"reference/configuration/#domain-configuration","title":"Domain Configuration","text":""},{"location":"reference/configuration/#domain-structure","title":"Domain Structure","text":"<p>Each domain can have its own configuration in <code>domain.yaml</code>:</p> <pre><code># domains/testing/domain.yaml\ndomain:\n  name: \"testing\"\n  description: \"Testing patterns and best practices\"\n  version: \"1.2.0\"\n\n# Inheritance\nextends:\n  - base\n  - quality-assurance\n\n# Files in this domain\nfiles:\n  core.md: \"Core testing conventions\"\n  unit-tests.md: \"Unit testing patterns\"\n  e2e-tests.md: \"End-to-end testing strategies\"\n\n# Context triggers\ntriggers:\n  keywords: [\"test\", \"pytest\", \"assert\", \"fixture\", \"mock\"]\n  file_patterns: [\"*_test.py\", \"test_*.py\", \"tests/**/*.py\"]\n  commands: [\"pytest\", \"python -m pytest\"]\n\n# Provider compatibility\nproviders:\n  claude: true\n  cursor: true\n  windsurf: true\n  aider: true\n\n# Learning capture\nlearning:\n  auto_capture: true\n  review_frequency: \"monthly\"\n  categories: [\"pattern\", \"anti-pattern\", \"tool-specific\"]\n</code></pre>"},{"location":"reference/configuration/#domain-registry","title":"Domain Registry","text":"<p>The community domain registry (<code>community-domains/registry.json</code>) lists available domains:</p> <pre><code>{\n  \"domains\": {\n    \"git\": {\n      \"name\": \"Git Workflows\",\n      \"description\": \"Version control best practices\",\n      \"version\": \"2.1.0\",\n      \"maintainer\": \"ai-conventions\",\n      \"tags\": [\"vcs\", \"git\", \"workflows\"],\n      \"files\": [\"core.md\", \"commit-messages.md\", \"branching.md\"],\n      \"dependencies\": [\"global\"],\n      \"providers\": [\"claude\", \"cursor\", \"windsurf\", \"aider\"]\n    },\n    \"testing\": {\n      \"name\": \"Testing Patterns\",\n      \"description\": \"Testing strategies and best practices\",\n      \"version\": \"1.8.0\",\n      \"maintainer\": \"ai-conventions\",\n      \"tags\": [\"testing\", \"quality\", \"automation\"],\n      \"files\": [\"core.md\", \"unit-tests.md\", \"e2e-tests.md\"],\n      \"dependencies\": [\"global\"],\n      \"providers\": [\"claude\", \"cursor\", \"windsurf\", \"aider\"]\n    }\n  },\n  \"collections\": {\n    \"web-development\": {\n      \"name\": \"Web Development\",\n      \"domains\": [\"javascript\", \"typescript\", \"react\", \"api-design\"],\n      \"description\": \"Complete web development conventions\"\n    }\n  }\n}\n</code></pre>"},{"location":"reference/configuration/#environment-variables","title":"Environment Variables","text":"Variable Description Default <code>AI_CONVENTIONS_HOME</code> Base directory for conventions <code>~/.ai-conventions</code> <code>AI_CONVENTIONS_CONFIG</code> Global configuration file <code>~/.ai-conventions/config.yaml</code> <code>AI_CONVENTIONS_PROJECT_CONFIG</code> Project configuration file <code>./.ai-conventions.yaml</code> <code>AI_CONVENTIONS_DEBUG</code> Enable debug logging <code>false</code> <code>AI_CONVENTIONS_NO_TELEMETRY</code> Disable telemetry <code>false</code> <code>AI_CONVENTIONS_OFFLINE</code> Offline mode (no updates) <code>false</code>"},{"location":"reference/configuration/#configuration-validation","title":"Configuration Validation","text":"<p>The system validates configuration files on startup:</p> <pre><code># Validate current configuration\nai-conventions config validate\n\n# Validate specific config file\nai-conventions config validate --file .ai-conventions.yaml\n\n# Show configuration schema\nai-conventions config schema\n</code></pre>"},{"location":"reference/configuration/#migration-from-legacy-configurations","title":"Migration from Legacy Configurations","text":""},{"location":"reference/configuration/#from-cursorrules","title":"From .cursorrules","text":"<pre><code># Migrate existing .cursorrules to AI conventions\nai-conventions migrate --from cursorrules --file .cursorrules\n</code></pre>"},{"location":"reference/configuration/#from-custom-systems","title":"From Custom Systems","text":"<pre><code># Migration configuration\nmigration:\n  source: \"custom\"\n  mapping:\n    # Map file patterns to domains\n    \"lint-rules.md\": \"quality/linting\"\n    \"git-standards.md\": \"git/core\"\n    \"test-guidelines.md\": \"testing/core\"\n\n  # Transformation rules\n  transformations:\n    - from: \"# Rule:\"\n      to: \"## Convention:\"\n    - from: \"\u274c Don't\"\n      to: \"**Anti-pattern:**\"\n</code></pre>"},{"location":"reference/configuration/#best-practices","title":"Best Practices","text":""},{"location":"reference/configuration/#configuration-organization","title":"Configuration Organization","text":"<ol> <li>Keep project configs minimal - Use global defaults where possible</li> <li>Document custom settings - Add comments explaining non-standard choices</li> <li>Version control - Include <code>.ai-conventions.yaml</code> in git</li> <li>Environment-specific - Use different configs for dev/staging/prod</li> </ol>"},{"location":"reference/configuration/#security-considerations","title":"Security Considerations","text":"<ol> <li>No secrets in config - Use environment variables for sensitive data</li> <li>Validate inputs - Always validate configuration before applying</li> <li>Backup before changes - Enable backup_on_sync for safety</li> <li>Review permissions - Check file permissions on configuration files</li> </ol>"},{"location":"reference/configuration/#performance-optimization","title":"Performance Optimization","text":"<ol> <li>Use symlinks - Faster than copying for large domain collections</li> <li>Enable caching - Reduce repeated domain resolution</li> <li>Limit context size - Prevent excessive memory usage</li> <li>Lazy loading - Only load domains when needed</li> </ol>"}]}